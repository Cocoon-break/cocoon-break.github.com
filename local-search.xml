<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>传统POS流程及名词解释</title>
    <link href="/2020/10/19/%E4%BC%A0%E7%BB%9FPOS%E6%B5%81%E7%A8%8B%E5%8F%8A%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/"/>
    <url>/2020/10/19/%E4%BC%A0%E7%BB%9FPOS%E6%B5%81%E7%A8%8B%E5%8F%8A%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="传统POS流程及名词解释"><a href="#传统POS流程及名词解释" class="headerlink" title="传统POS流程及名词解释"></a>传统POS流程及名词解释</h3><h4 id="签到流程"><a href="#签到流程" class="headerlink" title="签到流程"></a>签到流程</h4><p>POS机签到只要有两个目的：</p><ol><li>链接主机证明该POS机设备是合法的</li><li>下载最新的工作密钥</li></ol><p>签到就是POS设备向服务器发起签到请求，然后让服务器返回三个工作密钥，分别用于加密POS传输给服务器的银行卡的三个信息。三个工作密钥是通过POS设备硬件芯片内的密钥（在服务器端也有）进行加密的。</p><pre><code class="hljs mermaid">graph TDEE&#123;签到&#125;--fail--&gt;TT(退出应用)EE--success--&gt;A&#123;参数下载&#125;--fail--&gt;TT(退出应用)A--success--&gt;B&#123;AID参数下载&#125;--fail--&gt;TT(退出应用)B--success--&gt;C&#123;下载CA公钥&#125;--fail--&gt;TT(退出应用)C--success--&gt;E(交易流程)</code></pre><h4 id="交易流程"><a href="#交易流程" class="headerlink" title="交易流程"></a>交易流程</h4><p>交易流程是在签到成功之后才能进行，交易流程包括正常消费/预授权流程/余额查询。</p><p>名称解释：</p><ol><li><p>消费：</p><p>包括正常刷卡/挥卡/插卡消费</p></li><li><p>消费撤销：</p><p>因为某种原因已经进行过消费的一笔交易，请求撤销。需要注意的是，<strong>消费撤销必须是撤销消费所用POS机的当日当批次的消费交易</strong>。</p></li><li><p>消费退货：</p><p>和消费撤销类似，退货也是对一笔消费交易进行退款。不同的是</p><ul><li>退货不要求当日当批次的消费</li><li>退货一般支持部分退货，多次退货，而消费撤销一般都是直接退全款</li></ul></li><li><p>结算：</p><p>一般POS机在每天的工作结束之后，应进行结算操作（分为手动结算和自动结算）结算会将当日POS机中存储的所有笔交易（包含消费、消费撤销）上传至后台并清空，然后进行签退。一个结算周期内所有的交易使用的是同一个批次号，即同一批次。因此可以简单的理解为结算之前只能消费撤销，因为消费数据在POS机里面存着；结算之后只能退货，此时原消费数据已从POS机里面清除。</p></li><li><p>预授权：</p><p>就是商户通过POS机申请的方式向发卡行申请冻结持卡人借记卡或贷记卡中一部分金额或额度作为抵押的一种交易，也可以解释为商户在客户的授权下向发卡行申请的在一定时限、一定金额内扣收一笔客户款项的许可，这个款项的许可呈现，就是欠账单上的授权码。理解预授权要注意一下几点</p><ul><li>预授权不是扣款，并没有产生实际交易，只是这部分钱在商户进一步处理前，客户无法去操作而已</li><li>必须验证客户卡片的有效性，包括卡号、有效期、发卡行、客户签名、密码</li><li>预授权的小票需要客户签名</li><li>必须注意保存预授权单据，因为在预授权完成时要求必须输入预授权号，预授权日期等信息，否则预授权完成交易无法成功完成，商户无法收到结算资金。</li><li>预授权有效期一般为30天（含），超过时间资金将自动解冻。</li><li>交易凭证上标有“预授权”字样。</li></ul></li><li><p>预授权撤销：</p><p>预授权以后如果想取消怎么办？一是等30天后预授权自动取消，二就是做预授权撤销，预授权撤销是只商户未进行预授权完成前，客户不想使用这张卡进行消费时商家进行的操作。</p></li><li><p>预授权完成：</p><p>是指特约商户对已取得预授权的交易，在预授权金额或超出预授权金额一定比例范围内，通过POS终端或手工方式完成持卡人付款的过程，因为在预授权是客户已经输入过密码了，表示商家可处理预授权的资金，所以预授权完成时无需输入密码。预授权是可以超额扣款的，最大扣款金额是预授权金额的115%。</p></li><li><p>预授权完成撤销：</p><p>预授权完成撤销，是指商户已经进行预授权完成，但是发现完成金额与实际消费金额不符时进行的操作，预授权完成撤销会取消预授权完成的凭证，把预授权恢复到初始状态，注意，预授权完成撤销后是可以再次发起预授权完成的，并且整个过程无需客户再次输密。</p></li></ol><pre><code class="hljs mermaid">graph TDEE(交易流程)--&gt;A&#123;消费&#125;A--&gt;D(撤销)A--&gt;E(退货)D--&gt;Y(结算)E--&gt;Y(结算)EE--&gt;B&#123;预授权&#125;B--&gt;F(预授权撤销)F--&gt;Y(结算)B--&gt;G(预授权完成)G--&gt;H(预授权完成撤销)H--&gt;Y(结算)EE--&gt;C(余额查询)C--&gt;Y(结算)Y--&gt;Z(签退)</code></pre><h4 id="消费冲正流程"><a href="#消费冲正流程" class="headerlink" title="消费冲正流程"></a>消费冲正流程</h4><p>名次解释：</p><ol><li><p>冲正</p><p>当POS机终端将一笔交易的报文发往后台，但是没有收到返回最终超时时，POS机无法确定后台是否成功的完成了这笔交易。因此，当下笔交易发生前，POS机会先向后台请求撤销该笔不确定的交易，如果后台记录该笔交易成功，则回滚及撤销该笔交易，否则不处理，此为冲正成功；如果POS机与银联结算中间在数据传输过程中发生故障，则冲正不成功，此时刷卡方卡里的钱已经被扣，需要进行人工冲正。</p></li></ol><pre><code class="hljs mermaid">graph TDA(消费) --&gt; B&#123;是否有上一笔&lt;br&gt;的消费记录&#125;B --&gt;|是|C(请求冲正)C --&gt; D&#123;冲正成功 或&lt;br&gt;超过最大冲正次数&#125;D --&gt; |是|E(清除冲正记录)E --&gt; F(结束)D --&gt; |否|CB --&gt; |否|G(保存此次消费记录)G --&gt; K(请求交易)K --&gt; H&#123;响应交易&#125;H --&gt; |交易成功|I(交易成功)I --&gt; L(清除此次消费记录)L --&gt; FH --&gt; |交易失败|J(交易失败)J --&gt; M(不清除本次消费记录&lt;br&gt;下次消费时冲正)M --&gt; F</code></pre>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang之goroutine</title>
    <link href="/2020/08/10/Goroutine%20&amp;%20Scheduler/"/>
    <url>/2020/08/10/Goroutine%20&amp;%20Scheduler/</url>
    
    <content type="html"><![CDATA[<h3 id="Goroutine-amp-Scheduler"><a href="#Goroutine-amp-Scheduler" class="headerlink" title="Goroutine &amp; Scheduler"></a>Goroutine &amp; Scheduler</h3><p>在上一篇的<a href="">并发模型和线程模型概述</a>中我们了解到线程模型的分类。同时也知道了线程是 CPU 调度的实体，线程是真正在 CPU 上执行指令的实体。</p><p>每个程序启动的时候，都会创建一个初始进程，并启动一个线程。而线程可以取创建更多的线程。线程可以独立的执行。CPU 在这一层进行调度，而非进程。</p><p>在了解golang的scheduler之前，我们先了解下os scheduler。</p><h4 id="os-scheduler"><a href="#os-scheduler" class="headerlink" title="os scheduler"></a>os scheduler</h4><p>调度是一个非常广泛的概念，在很多领域中都会使用调度这个术语，在计算机科学中，调度就是将一种任务分配给资源的方法。调度的核心就是对有限资源进行分配以实现最大化资源利用率或者降低系统的尾延迟，调度系统面对的就是资源的需求和供给不平衡的问题。任务可能是计算机任务，如线程、进程或者数据流，这些任务会被调度到硬件资源上执行。例如CPU等硬件设备</p><p>os scheduler 保证如果有可以执行的线程时，就不会让CPU闲着。并且还要保证，所有可执行的线程都看起来在同时执行。另外，OS scheduler 在保证高优先级的线程执行机会大于低优先级线程的同时，不能让低优先级的线程始终得不到执行的机会。OS scheduler 还需要做到迅速决策，以降低延时。</p><p>当然操作系统的调度器是十分复杂，它必须要考虑到底层的硬件结构，包括但不限于处理器数和内核数，cpu cache和NUMA。如果没有这些东西，调度器就没办法尽可能有效的工作。</p><h4 id="Go-scheduler"><a href="#Go-scheduler" class="headerlink" title="Go scheduler"></a>Go scheduler</h4><p>今天的Go语言调度器有着非常优异的性能，但是在最初的调度器不仅实现非常简陋，也无法支撑高并发的服务。调度器经过几个大版本的迭代才有今天的优异性能。对于之前的调度器不做过多的赘述，我们主要学习下在go1.12之后基于抢占式的调度器。其他的调度可以从<a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/">Go调度器</a> 了解</p><h5 id="G-P-M-模型"><a href="#G-P-M-模型" class="headerlink" title="G-P-M 模型"></a>G-P-M 模型</h5><p>每个OS线程都有一个固定大小的内存块（一般是2M）来做栈，这个栈会用来存储当前正在被调用或者挂起的函数的内部变量。这个固定大小的栈同时很大又很小。因为2M的栈对于小小的Goroutine来说是很大的内存浪费，对于一些复杂的任务来说又显得太小。因此，Go语言做了自己的线程。Goroutine的栈初始仅为2K，随着任务执行按需增长，最大可达1G，完全由Go自己的调度器GoScheduler来调度。此外G C还会周期性的将不在使用的内存回收，收缩栈空间。</p><p>先来了解下G-P- M</p><ul><li>G：表示Gorutine，每个Goroutine对应一个G结构体，G存储Goroutine的运行堆栈、状态以及任务函数，可重用。</li><li>M：Machine，OS线程抽象，代表着真正执行计算的资源，在绑定有效的P后，进入schedule循环。</li><li>P：Processor，表示逻辑处理器。</li></ul><p>在Go程序启动，主机上定义的每一个虚拟内核都会为它分配一个逻辑处理器(P)，比如我的机器上有4个物理核，每个物理核上有两个硬件线程（超线程），那么Go程序会分配4*2=8个逻辑处理器（P）。每个P会分配一个OS线程（M），这个现场时OS来处理，并且OS还负责把现场放置到Core上去执行。这意味着Go程序在我的机器上有8个可用的线程执行，每个线程单独连到一个P上。G并非执行体，每个G都要绑定到P才能被调度执行。</p><h5 id="G-P-M模型调度"><a href="#G-P-M模型调度" class="headerlink" title="G-P-M模型调度"></a>G-P-M模型调度</h5><p>根据G- P- M模型我们知道，G的数量是可以成千上万个的。而P和M是和硬件相关的。所以延伸出两种用来保存G的任务队列：一种是Global任务队列，一种是每个P维护Local任务队列。</p><p>当通过go 关键字创建一个新的Goroutine的时候，它会优先被放入P的本地队列。为了允许Goroutine，M需要持有一个P，接着M会启动一个OS线程，循环从P的本地队列取出一个Goroutine并执行。当M执行完了当前P的Local队列里所有的G后，P也不会就这个闲下来，它会先尝试从Global队列寻找G来执行，如果Global队列为空，它会随机挑选另外一个P，从它的队列里拿走一半的G到自己的队列中执行。</p><p>如果一切正常，调度器会以上述的那种方式顺畅的运行，但是这个世界没这么美好，总有意外发生，以下分析Goroutine在两种例外情况下的行为</p><p>Go runtime 会在下面的 Goroutine 被阻塞的情况下运行另外一个 Goroutine：</p><ul><li>blocking syscall (for example opening a file)</li><li>network input</li><li>channel operations</li><li>primitives in the sync package</li></ul><p>这四种场景又可归类为两种类型：</p><ol><li><p>用户态阻塞/唤醒</p><p>当 Goroutine 因为 channel 操作或者 network I/O 而阻塞时（实际上 Golang 已经用 netpoller 实现了 Goroutine 网络 I/O 阻塞不会导致 M 被阻塞，仅阻塞 G，这里仅仅是举个栗子），对应的 G 会被放置到某个 wait 队列(如 channel 的 waitq)，该 G 的状态由<code>_Gruning</code>变为<code>_Gwaitting</code>，而 M 会跳过该 G 尝试获取并执行下一个 G，如果此时没有 runnable 的 G 供 M 运行，那么 M 将解绑 P，并进入 sleep 状态；当阻塞的 G 被另一端的 G2 唤醒时（比如 channel 的可读/写通知），G 被标记为 runnable，尝试加入 G2 所在 P 的 runnext，然后再是 P 的 Local 队列和 Global 队列。</p></li><li><p>系统调用阻塞</p><p>当 G 被阻塞在某个系统调用上时，此时 G 会阻塞在<code>_Gsyscall</code>状态，M 也处于 block on syscall 状态，此时的 M 可被抢占调度：执行该 G 的 M 会与 P 解绑，而 P 则尝试与其它 idle 的 M 绑定，继续执行其它 G。如果没有其它 idle 的 M，但 P 的 Local 队列中仍然有 G 需要执行，则创建一个新的 M；当系统调用完成后，G 会重新尝试获取一个 idle 的 P 进入它的 Local 队列恢复执行，如果没有 idle 的 P，G 会被标记为 runnable 加入到 Global 队列。</p></li></ol><p>更多的调度过程可参考<a href="https://juejin.cn/post/6844903846825705485">理解golang调度之二 ：Go调度器</a>含图解</p><h4 id="工作负载"><a href="#工作负载" class="headerlink" title="工作负载"></a>工作负载</h4><p>如何知道无序执行(并发)是可行的呢？了解所处理问题的工作负载(workload)是一个起点。有两种类型的工作负载在并发的时候要考虑到。</p><ul><li>**CPU密集(CPU-Bound)**：这种工作负载情况不会有Goroutines自动切换到waiting状态的情况，也不会有自动从waiting状态切到其他状态的情况。这种情况发生在进行持续计算的时候。线程计算Pi值就是CPU-Bound。</li><li>**IO密集(IO-Bound)**：这种工作负载会导致Goroutines自动进入等待状态。这种工作发生在持续地请求网络资源、或者是进行系统调用、或者是等待事件发生的情况。一个Goroutines需要读文件就是IO-Bound。我把同步事件(mutexes，atomic)类似导致Goroutine等待的情况归到此类。</li></ul><p><strong>cpu-bound的工作负载，你需要并行去使用并发</strong>。一个单独的OS/硬件线程处理多个Goroutines效率很低，因为Goroutines在这个工作负载里不会主动进入或者是离开等待状态。Goroutines数多于OS/硬件线程数的时候会降低工作负载的执行速度，因为从OS线程换上或者是换下Goroutines会有延迟(切换的时间)。上下文切换会在workload里创建出“一切都停止”事件，因为在切换的时候你的所有workload都不会执行。</p><p><strong>在IO-Bound的workloads里，你不需要并行去使用并发</strong>。一个单独OS/硬件线程可以有效率地处理多个Goroutines，因为Goroutines作为它自己workload的一部分可以自动进入或者离开等待状态(waiting)。Goroutines数量多于OS/硬件线程数可以加速workload的执行,因为Goroutines在OS线程上切换不会创建“一切都停止”事件。你的workload会自然停止并且这会让一个不同的Goroutine去有效率地使用相同的OS/硬件线程，而不是让OS/硬件线程空闲下来。</p><h4 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h4><table><thead><tr><th>类型</th><th>线程数</th><th>结论</th><th>原因</th></tr></thead><tbody><tr><td>CPU密集型</td><td>1</td><td>起一个goroutine，性能要好于起多个goroutine</td><td>1个OS线程中，无法并行计算。多个goroutine 上下文切换会增加性能损耗</td></tr><tr><td>CPU密集型</td><td>大于1</td><td>起多个goroutine，性能要好于起一个goroutine</td><td>多个OS线程中可以并行计算。收益大于goroutine上下文切换</td></tr><tr><td>IO密集型</td><td>1</td><td>起多个goroutine，性能高于起一个goroutine</td><td>1个OS线程中，多个goroutine都能有效共享一个OS线程，每个goroutine能够自动进行上下文切换，OS线程一直有事情做</td></tr><tr><td>IO密集型</td><td>大于1</td><td>起多个goroutine，性能高于起一个goroutine</td><td>多个OS线程和1个OS线程相比差距不大，额外的OS/硬件线程并没有提供更好的性能。这是因为更多的goroutine会进入等待状态。</td></tr></tbody></table><p>该表格结论来自于<a href="https://juejin.im/post/6844903847568080904">理解golang调度之三：并发</a></p><p>参考：</p><p><a href="https://qcrao.com/2019/09/02/dive-into-go-scheduler/">https://qcrao.com/2019/09/02/dive-into-go-scheduler/</a></p><p><a href="https://www.infoq.cn/article/XF6v3Vapqsqt17FuTVst">https://www.infoq.cn/article/XF6v3Vapqsqt17FuTVst</a></p><p><a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/">https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/</a></p><p><a href="https://www.cnblogs.com/jiujuan/p/12735559.html">https://www.cnblogs.com/jiujuan/p/12735559.html</a></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并发模型及线程模型概述</title>
    <link href="/2020/07/08/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%BF%B0/"/>
    <url>/2020/07/08/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B%E5%8F%8A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="同步异步"><a href="#同步异步" class="headerlink" title="同步异步"></a>同步异步</h3><p>要了解各种并发模型思想，首先要了解什么是同步，什么是异步？什么是阻塞，什么是非阻塞？</p><p>举一个例子说明，领导安排小东开发：</p><p><strong>同步阻塞：</strong>领导安排小东开发后，一直盯着小东开发，直到小东开发完成之后，才去干其它活。</p><p><strong>同步不阻塞：</strong>领导安排小东开发后，就忙自己的事情去了，每隔一会儿就过来询问小东是否完成了没。</p><p><strong>异步阻塞：</strong>领导安排小东开发后，不盯着小东，也不会忙其他事，小东开发完成后就通知领导。</p><p><strong>异步不阻塞：</strong>领导安排小东开发后，就忙自己的事情去了，小东开发完成后就通知领导。</p><p><strong>总结：</strong></p><p>同步，是调用者主动去查看调用的状态；</p><p>异步，则是被调用者来通知调用者；</p><p>阻塞和非阻塞的区别是调用后是否立即返回</p><h3 id="并发模型"><a href="#并发模型" class="headerlink" title="并发模型"></a>并发模型</h3><h4 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h4><p>进程是操作系统资源分配的基本单位，线程是 CPU 调度的基本单位。从操作系统层面去看是进程，从 CPU 层面去看是线程。</p><p>进程的空间是独立，各个进程相互不干扰，每个进程拥有自己的进程内存，上下文环境，进程控制块，一个进程至少有一个或者多个线程。线程属于进程，线程要存在必须依赖于进程，线程共享进程的内存，但线程有自己的栈空间，能创建多少个线程也取决于进程内存的大小。</p><p>线程的上下文切换代价比进程要小的多。<br>进程之间强调的是通信，线程之间强调的是同步（数据安全）。</p><p><a href="https://learnku.com/articles/32807">转自链接</a></p><h4 id="并发模型-1"><a href="#并发模型-1" class="headerlink" title="并发模型"></a>并发模型</h4><ol><li><p>单进/线程-循环处理任务</p><p>单进程和单线程本质是一样的，不具备并发处理的能力，只能串行处理任务。</p></li><li><p>多进程单线程</p><p>主进程负责监听和管理连接，当有客户端请求来时，就fork一个子进程来处理连接。这种模型会比较稳定，最大的好处是隔离性，子进程万一 crash 并不会影响到父进程，也不会产生线程安全问题。但是创建进程对内存消耗会比较，并且CPU在多个进程间来回切换开销也大，所以子进程不适合过多，总的来说这种模型对系统的负担过重</p></li><li><p>单进程多线程</p><p>单进程多线程和多进程单线程的方式类似，只不过是替换成线程。主线程负责监听，管理连接，子线程负责处理业务逻辑。多线程提高了响应速度，让IO和计算相互重叠，降低延时。但是也带来了频繁地创建、销毁线程，这对系统也是个不小的开销。同时也要处理同步的问题，当多个线程请求同一个资源时，需要用锁之类的手段来保证线程安全。最后一个是线程的奔溃会影响整个进程，稳定性不如多进程。</p></li><li><p>多进程多线程</p><p>这种并发模型是在开启多个子进程后，每个子进程下面又会开启多个线程。这种模式下并发承受能力会比单纯的多进程好许多，但是这个也分情况，比如在<strong>CPU密集型作业</strong>下未必会比多进程好，因为每一个进程下的多线程上下文不断切换的开销是非常大的。cpu 本来就在多个进程间切换，现在又要在单个进程下的多个线程间切换，cpu 大部分时间都在切换上下文了，真正用于计算的时间反而很少，因此影响了其性能。</p></li><li><p>IO多路复用</p><p>IO多路复用是一种同步IO模型，实现一个线程可以监视多个文件句柄；一旦某个文件句柄就绪，就能够通知应用程序进行相应的读写操作；没有文件句柄就绪时会阻塞应用程序，交出cpu。多路是指网络连接，复用指的是同一个线程。</p><p><a href="https://juejin.im/post/6844904200141438984">彻底理解 IO多路复用</a></p></li><li><p>协程</p><p>协程基于用户空间的调度器，具体的调度算法由具体的编译器和开发者实现，相比多线程和事件回调的方式，更加灵活可控。不同语言协程的调度方式也不一样，python 是在代码里显式地<code>yield</code>进行切换，golang 则是用 go 语法来开启<code>goroutine</code>，具体的调度由语言层面提供的运行时执行。</p></li></ol><h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h3><p>线程的实现可以分为三类，内核级线程，用户级线程，以及混合型线程。</p><p>以下内容摘抄自<a href="https://www.infoq.cn/article/XF6v3Vapqsqt17FuTVst">Goroutine并发调度模型深度解析之手撸一个高性能Goroutine池</a></p><p><strong><a href="https://helix979.github.io/jkoo/post/os-scheduler/">内核调度实体（KSE，Kernel Scheduling Entity）</a></strong></p><ol><li><p>内核级线程模型</p><p>用户线程与内核线程KSE是一对一（1 : 1）的映射模型，也就是每一个用户线程绑定一个实际的内核线程，而线程的调度则完全交付给操作系统内核去做，应用程序对线程的创建、终止以及同步都基于内核提供的系统调用来完成，大部分编程语言的线程库(比如Java的java.lang.Thread、C++11的std::thread等等)都是对操作系统的线程（内核级线程）的一层封装，创建出来的每个线程与一个独立的KSE静态绑定，因此其调度完全由操作系统内核调度器去做，也就是说，一个进程里创建出来的多个线程每一个都绑定一个KSE。</p><p>这种模型的优势和劣势同样明显：优势是实现简单，直接借助操作系统内核的线程以及调度器，所以CPU可以快速切换调度线程，于是多个线程可以同时运行，因此相较于用户级线程模型它真正做到了并行处理；但它的劣势是，由于直接借助了操作系统内核来创建、销毁和以及多个线程之间的上下文切换和调度，因此资源成本大幅上涨，且对性能影响很大。</p><pre><code class="hljs mermaid">graph BTA[内核线程] --&gt;B(用户线程)C[内核线程] --&gt;D(用户线程)E[内核线程] --&gt;F(用户线程)</code></pre></li></ol><ol start="2"><li><p>用户级线程模型</p><p>用户线程与内核线程KSE是多对一（N : 1）的映射模型，多个用户线程的一般从属于单个进程并且多线程的调度是由用户自己的线程库来完成，线程的创建、销毁以及多线程之间的协调等操作都是由用户自己的线程库来负责而无须借助系统调用来实现。一个进程中所有创建的线程都只和同一个KSE在运行时动态绑定，也就是说，操作系统只知道用户进程而对其中的线程是无感知的，内核的所有调度都是基于用户进程。许多语言实现的 <strong>协程库</strong>基本上都属于这种方式（比如python的gevent）。</p><pre><code class="hljs mermaid">graph BTA[内核线程] --&gt;B(用户线程)A--&gt;D(用户线程)A --&gt;F(用户线程)</code></pre><p>由于线程调度是在用户层面完成的，也就是相较于内核调度不需要让CPU在用户态和内核态之间切换，这种实现方式相比内核级线程可以做的很轻量级，对系统资源的消耗会小很多，因此可以创建的线程数量与上下文切换所花费的代价也会小得多。</p><p>但该模型有个原罪：并不能做到真正意义上的并发，假设在某个用户进程上的某个用户线程因为一个阻塞调用（比如I/O阻塞）而被CPU给中断（抢占式调度）了，那么该进程内的所有线程都被阻塞（因为单个用户进程内的线程自调度是没有CPU时钟中断的，从而没有轮转调度），整个进程被挂起。即便是多CPU的机器，也无济于事，因为在用户级线程模型下，一个CPU关联运行的是整个用户进程，进程内的子线程绑定到CPU执行是由用户进程调度的，内部线程对CPU是不可见的，此时可以理解为CPU的调度单位是用户进程。所以很多的<strong>协程库</strong>会把自己一些阻塞的操作重新封装为完全的非阻塞形式，然后在以前要阻塞的点上，主动让出自己，并通过某种方式通知或唤醒其他待执行的用户线程在该KSE上运行，从而避免了内核调度器由于KSE阻塞而做上下文切换，这样整个进程也不会被阻塞了。</p></li><li><p>两级线程模型（混合型线程模型）</p><p>两级线程模型是博采众长之后的产物，充分吸收前两种线程模型的优点且尽量规避它们的缺点。</p><p>在此模型下，用户线程与内核KSE是多对多（N : M）的映射模型：首先，区别于用户级线程模型，两级线程模型中的一个进程可以与多个内核线程KSE关联，也就是说一个进程内的多个线程可以分别绑定一个自己的KSE，这点和内核级线程模型相似；其次，又区别于内核级线程模型，它的进程里的线程并不与KSE唯一绑定，而是可以多个用户线程映射到同一个KSE，当某个KSE因为其绑定的线程的阻塞操作被内核调度出CPU时，其关联的进程中其余用户线程可以重新与其他KSE绑定运行。</p><pre><code class="hljs mermaid">graph BTA[内核线程] --&gt;B(用户线程)A--&gt;D(用户线程)A --&gt;F(用户线程)K[内核线程] --&gt;BK--&gt;DK--&gt;FZ[内核线程] --&gt;BZ--&gt;DZ--&gt;F</code></pre><p>所以，两级线程模型既不是用户级线程模型那种完全靠自己调度的也不是内核级线程模型完全靠操作系统调度的，而是中间态（自身调度与系统调度协同工作），也就是 — 『薛定谔的模型』（误），因为这种模型的高度复杂性，操作系统内核开发者一般不会使用，所以更多时候是作为第三方库的形式出现，而Go语言中的runtime调度器就是采用的这种实现方案，实现了Goroutine与KSE之间的动态关联，不过Go语言的实现更加高级和优雅；该模型为何被称为两级？<strong>即用户调度器实现用户线程到KSE的『调度』，内核调度器实现KSE到CPU上的『调度』</strong></p></li></ol><p>参考链接:</p><p><a href="https://juejin.im/entry/6844903680651558919">https://juejin.im/entry/6844903680651558919</a></p><p><a href="https://juejin.im/post/6844904200141438984">https://juejin.im/post/6844904200141438984</a></p><p><a href="https://learnku.com/articles/32807">https://learnku.com/articles/32807</a></p><p><a href="https://www.infoq.cn/article/XF6v3Vapqsqt17FuTVst">https://www.infoq.cn/article/XF6v3Vapqsqt17FuTVst</a></p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>扩展</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 之 JNA</title>
    <link href="/2018/10/15/java%20%E4%B9%8B%20JNA/"/>
    <url>/2018/10/15/java%20%E4%B9%8B%20JNA/</url>
    
    <content type="html"><![CDATA[<p>我们知道JAVA调用C和C++ 通常用是JNI，JNI虽然好用但是对于JAVA程序猿并不是很有友好，有更多的学习成本。对于java程序猿来说JNA的学习成本就低的多。在工程中只要引入一个jar包就可以非常方便的使用。对于官方的一些样例这里我也就不在重复了。主要还是从我自己这边使用遇到一些问题说起。官方入门的一些请移步<a href="https://github.com/java-native-access/jna">官方文档</a>。</p><p>不过在开始之前一定一定要了解的是类型映射关系。也就是在C或者C++ 中的类型在JAVA中对应的类型是什么？直接上表：</p><table><thead><tr><th align="center">C基本类型</th><th align="center">长度</th><th align="center">Java类型</th><th align="center">Windows类型</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">8位整型</td><td align="center">byte</td><td align="center">BYTE、TCHAR</td></tr><tr><td align="center">short</td><td align="center">16位整型</td><td align="center">short</td><td align="center">WORD</td></tr><tr><td align="center">wchar_t</td><td align="center">16/32位字符</td><td align="center">char</td><td align="center">TCHAR</td></tr><tr><td align="center">int</td><td align="center">32位整型</td><td align="center">int</td><td align="center">DWORD</td></tr><tr><td align="center">int</td><td align="center">布尔值</td><td align="center">boolean</td><td align="center">BOOL</td></tr><tr><td align="center">long</td><td align="center">32/64位整型</td><td align="center">NativeLong</td><td align="center">LONG</td></tr><tr><td align="center">long long</td><td align="center">64位整型</td><td align="center">long</td><td align="center">__int64</td></tr><tr><td align="center">float</td><td align="center">32位浮点型</td><td align="center">float</td><td align="center"></td></tr><tr><td align="center">double</td><td align="center">64位浮点型</td><td align="center">double</td><td align="center"></td></tr><tr><td align="center">char*</td><td align="center">C字符串</td><td align="center">String</td><td align="center">LPTCSTR</td></tr><tr><td align="center">void*</td><td align="center">指针</td><td align="center">Pointer</td><td align="center">LPVOID、HANDLE、LP<em>XXX</em></td></tr></tbody></table><h4 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h4><p>我这边接到一个另外一个部门提供的一个dll库和头文件，需要使用JNA的方式进行开发使用。提供一个NVSSDK.dll 和其他的一些依赖的dll库和头文件。</p><h5 id="定义一个接口和编写相应的结构体映射"><a href="#定义一个接口和编写相应的结构体映射" class="headerlink" title="定义一个接口和编写相应的结构体映射"></a>定义一个接口和编写相应的结构体映射</h5><p>定义一个类编写要使用dll库中的方法和对应的结构体，具体可参考相关的头文件。简易是和头文件对应着看。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.megvii.camera.proxy;<span class="hljs-keyword">import</span> com.sun.jna.Library;<span class="hljs-keyword">import</span> com.sun.jna.Pointer;<span class="hljs-keyword">import</span> com.sun.jna.Structure;<span class="hljs-keyword">import</span> com.sun.jna.Structure.ByValue;<span class="hljs-keyword">import</span> com.sun.jna.ptr.IntByReference;<span class="hljs-keyword">import</span> com.sun.jna.win32.StdCallLibrary.StdCallCallback;<span class="hljs-keyword">import</span> com.sun.jna.Callback;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">NVSSDK</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Library</span> </span>&#123;  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PicTime</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Structure</span> </span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> uiYear;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> uiMonth;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> uiDay;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> uiWeek;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> uiHour;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> uiMinute;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> uiSecondsr;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> uiMilliseconds;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PicData</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Structure</span> </span>&#123;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PicData</span><span class="hljs-params">(Pointer pointer)</span> </span>&#123;            <span class="hljs-keyword">super</span>(pointer);            useMemory(pointer);            read();        &#125;        <span class="hljs-keyword">public</span> PicTime tPicTime;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> iDataLen;        <span class="hljs-keyword">public</span> Pointer pcPicData;    &#125;  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FacePicStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Structure</span> </span>&#123;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FacePicStream</span><span class="hljs-params">(Pointer pointer)</span> </span>&#123;            <span class="hljs-keyword">super</span>(pointer);            useMemory(pointer);            read();        &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> iStructLen;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> iSizeOfFull;                <span class="hljs-keyword">public</span> Pointer tFullData;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> iFaceCount;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> iSizeOfFace;                <span class="hljs-keyword">public</span> Pointer[] tPicData = <span class="hljs-keyword">new</span> Pointer[<span class="hljs-number">32</span>];        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> iFaceFrameId;               <span class="hljs-keyword">public</span> PicTime tNewPicTime;    &#125;   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">NET_PICSTREAM_NOTIFY</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StdCallCallback</span> </span>&#123;        <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">PicDataNotify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _ulID, <span class="hljs-keyword">int</span> _lCommand, Pointer _tInfo, <span class="hljs-keyword">int</span> _iLen,</span></span><span class="hljs-function"><span class="hljs-params">                          Pointer _lpUserData)</span></span>;    &#125; <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetPicPara</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Structure</span> </span>&#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> iStructLen;                <span class="hljs-comment">//Structure length</span>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> iChannelNo;        <span class="hljs-keyword">public</span> NET_PICSTREAM_NOTIFY cbkPicStreamNotify;        <span class="hljs-keyword">public</span> Pointer pvUser;    &#125;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">NetClient_StartRecvNetPicStream</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _iLogonID, NetPicPara _ptPara, <span class="hljs-keyword">int</span> _iBufLen, IntByReference _puiRecvID)</span></span>;</code></pre><p>上面继承Structure的是C中的结构体，继承StdCallCallback的是C中回调方法，NetClient_StartRecvNetPicStream是C中我们要调用的方法。</p><p>在另外一个类中加载动态库</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.megvii.camera.proxy;<span class="hljs-keyword">import</span> com.sun.jna.Native;<span class="hljs-keyword">import</span> com.sun.jna.ptr.IntByReference;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetClient</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> NVSSDK nvssdk;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> NetClient netClient;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">NetClient</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> NetClient <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">if</span> (netClient == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">synchronized</span> (NetClient.class) &#123;                <span class="hljs-keyword">if</span> (netClient == <span class="hljs-keyword">null</span>) &#123;                    netClient = <span class="hljs-keyword">new</span> NetClient();                    nvssdk = (NVSSDK) Native.loadLibrary(<span class="hljs-string">&quot;NVSSDK&quot;</span>,                            NVSSDK.class);                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> netClient;    &#125;   <span class="hljs-comment">//开始接收图片流</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">StartRecvNetPicStream</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _iLogonID, NVSSDK.NetPicPara _ptPara, <span class="hljs-keyword">int</span> _iBufLen, IntByReference _puiRecvID)</span> </span>&#123;        <span class="hljs-keyword">return</span> nvssdk.NetClient_StartRecvNetPicStream(_iLogonID, _ptPara, _iBufLen, _puiRecvID);    &#125;&#125;</code></pre><h5 id="相关的头文件"><a href="#相关的头文件" class="headerlink" title="相关的头文件"></a>相关的头文件</h5><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tagFacePicStream</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">int</span> iStructLen;<span class="hljs-comment">//Structure length</span><span class="hljs-keyword">int</span>iSizeOfFull;<span class="hljs-comment">//The size of strcut PicData</span>PicData*ptFullData;<span class="hljs-comment">//The data of full screen</span><span class="hljs-keyword">int</span>iFaceCount;<span class="hljs-comment">//The current frame detects the number of face</span><span class="hljs-keyword">int</span>iSizeOfFace;<span class="hljs-comment">//The size of strcut FacePicData</span>FacePicData*ptFaceData[<span class="hljs-number">108</span>];<span class="hljs-keyword">int</span>iFaceFrameId;<span class="hljs-comment">//The face jpeg frame no</span>PicTimetNewPicTime;<span class="hljs-comment">//The picture capture time, ptFullData contain time is out of date</span>&#125; FacePicStream, *pFacePicStream;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tagSnapPicData</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">int</span> iSnapType;<span class="hljs-comment">//Snap type</span><span class="hljs-keyword">int</span> iWidth;<span class="hljs-comment">//Picture wide</span><span class="hljs-keyword">int</span> iHeight;<span class="hljs-comment">//Picture high</span><span class="hljs-keyword">int</span>iSize;<span class="hljs-comment">//The size of strcut PicData</span>PicData*ptPicData;&#125; SnapPicData, *pSnapPicData;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tagPicTime</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> uiYear;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> uiMonth;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> uiDay;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> uiWeek;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> uiHour;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> uiMinute;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> uiSecondsr;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> uiMilliseconds;&#125; PicTime, *pPicTime;<span class="hljs-comment">//回调</span><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(__stdcall *NET_PICSTREAM_NOTIFY)</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> _uiRecvID, <span class="hljs-keyword">long</span> _lCommand, <span class="hljs-keyword">void</span>* _pvBuf, <span class="hljs-keyword">int</span> _iBufLen, <span class="hljs-keyword">void</span>* _pvUser)</span></span>;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tagNetPicPara</span></span><span class="hljs-class">&#123;</span><span class="hljs-keyword">int</span> iStructLen;<span class="hljs-comment">//Structure length</span><span class="hljs-keyword">int</span>iChannelNo;NET_PICSTREAM_NOTIFYcbkPicStreamNotify;<span class="hljs-keyword">void</span>*pvUser;<span class="hljs-keyword">int</span>iPicType;<span class="hljs-comment">//Client request picture stream type.Structured proprietary(This field is not sent or sent 0: indicates that the server is adaptively sent and sent based on the current configuration.)</span><span class="hljs-comment">//bit0£ºFace picture stream </span><span class="hljs-comment">//bit1£ºpedestrian </span><span class="hljs-comment">//bit2:plate number</span><span class="hljs-comment">//bit3:motor vehicles</span><span class="hljs-comment">//bit4:Non-motor vehicle</span>&#125; NetPicPara, *pNetPicPara;<span class="hljs-comment">//方法</span><span class="hljs-function"><span class="hljs-keyword">int</span> __stdcall <span class="hljs-title">NetClient_StartRecvNetPicStream</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _iLogonID, NetPicPara* _ptPara, <span class="hljs-keyword">int</span> _iBufLen, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* _puiRecvID)</span></span>;</code></pre><h5 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h5><p>需要留意的是FacePicStream和PicData的构造方法，这个方法是和指针转换时使用的，如果没有这么写的话Java是无法获取到C中指针的值的。以下的回调方法中回调了一个指针，将<strong>指针转换成头文件中对应的结构体</strong>。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetPicQueue</span><span class="hljs-params">(<span class="hljs-keyword">final</span> C4SCamera camera)</span> </span>&#123;        NVSSDK.NetPicPara picPara = <span class="hljs-keyword">new</span> NVSSDK.NetPicPara();        picPara.iChannelNo = <span class="hljs-number">0</span>;        picPara.iStructLen = picPara.size();        picPara.cbkPicStreamNotify = <span class="hljs-keyword">new</span> NVSSDK.NET_PICSTREAM_NOTIFY() &#123;            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">PicDataNotify</span><span class="hljs-params">(<span class="hljs-keyword">int</span> _ulID, <span class="hljs-keyword">int</span> _lCommand, Pointer _tInfo, <span class="hljs-keyword">int</span> _iLen, Pointer _lpUserData)</span> </span>&#123;                <span class="hljs-keyword">if</span> (_tInfo == <span class="hljs-keyword">null</span> || NVSSDK.NET_PICSTREAM_CMD_FACE != _lCommand) &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                &#125;                <span class="hljs-keyword">if</span> (!camera.capture.get()) &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;                &#125;                NVSSDK.FacePicStream picStream = <span class="hljs-keyword">new</span> NVSSDK.FacePicStream(_tInfo);                <span class="hljs-keyword">if</span> (picStream.tFullData != <span class="hljs-keyword">null</span>) &#123;                    NVSSDK.PicData fullData = <span class="hljs-keyword">new</span> NVSSDK.PicData(picStream.tFullData);                    <span class="hljs-keyword">if</span> (fullData != <span class="hljs-keyword">null</span> &amp;&amp; fullData.iDataLen &gt; <span class="hljs-number">0</span> &amp;&amp; camera.capture.get()) &#123;                        <span class="hljs-keyword">byte</span>[] data = fullData.pcPicData.getByteArray(<span class="hljs-number">0</span>, fullData.iDataLen);                        FaceInfo faceInfo = <span class="hljs-keyword">new</span> FaceInfo();                        faceInfo.faceData = data;                        faceInfo.cameraIP = camera.ip;                        faceInfo.cameraAlias = camera.alias;                        camera.captureQueue.offer(faceInfo);                    &#125;                &#125;                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;            &#125;        &#125;;        IntByReference relsize = <span class="hljs-keyword">new</span> IntByReference();        <span class="hljs-keyword">int</span> iRet = NetClient.getInstance().StartRecvNetPicStream(camera.logonId, picPara, picPara.size(), relsize);    &#125;</code></pre><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><ol><li><p><strong>java.lang.UnsatisfiedLinkError: Unable to load library ‘NVSSDK’:</strong></p><p>这个错误是无法找到对应的dll库，也就是我前面提到的NVSSDK.dll。出现这个情况的有以下三种可能</p><ul><li><p>jdk版本的位数和dll库的位数不一致。比如你的jdk版本是32位的，但是你的dll库是64位，就会出现这个错误，反过来也一样。解决办法是更换同样位数的库或者jdk</p></li><li><p>还有一种你的环境变量中的path没有包含你要用的dll库路径。在JNA中查找动态库的顺序是，Java虚拟机中的jna.library.path，然后是Java虚机的java.library.path，最后才是系统环境变量下path。所以只要在这个三个路径只要有一个路径下有包含你的dll库路径就行。</p><pre><code class="hljs java">System.setProperty(<span class="hljs-string">&quot;jna.library.path&quot;</span>, dllPath);</code></pre></li></ul></li><li><p>在使用过程中指针和结构体之间的相互转换，发现值没有复制到Java过来。</p><ul><li><p>结构体的构造方法,添加useMemory(pointer);和read();</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FacePicStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Structure</span></span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FacePicStream</span><span class="hljs-params">(Pointer pointer)</span> </span>&#123;          <span class="hljs-keyword">super</span>(pointer);          useMemory(pointer);          read();      &#125;    &#125;</code></pre></li><li><p>使用</p><pre><code class="hljs java">Pointer _tInfo;NVSSDK.FacePicStream picStream = <span class="hljs-keyword">new</span> NVSSDK.FacePicStream(_tInfo);</code></pre></li></ul></li><li><p>Java中的Structure和C结构体中的顺序写错了。如果是同样类型的不会出现编译错误，但是取到的值准确，类型不同则出现编译错误。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jna</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 之 slice &amp; defer 关键字</title>
    <link href="/2018/09/10/013_golang%E4%B9%8Bslice_map/"/>
    <url>/2018/09/10/013_golang%E4%B9%8Bslice_map/</url>
    
    <content type="html"><![CDATA[<p>今天我们讲讲golang的slice和defer。</p><p>slice是go里面一个很重要的数据结构，使用这种结构来管理数据集合。slice 类似其他语言中的数组，但是又有一些其他不同的属性。</p><p>在正式开始讲slice之前我们来说一说golang 中的<code>defer</code>，原本觉得自己对defer有一定了解了。但是昨天看了一本书，才发现自己对defer 的了解是这么浅，在没有运行以下代码前你能否得出正确答案呢？运行代码之后能否回答为什么？</p><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-params">(result <span class="hljs-keyword">int</span>)</span></span> &#123;<span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;result++&#125;()<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f2</span><span class="hljs-params">()</span> <span class="hljs-params">(r <span class="hljs-keyword">int</span>)</span></span> &#123;t := <span class="hljs-number">5</span><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;t = t + <span class="hljs-number">5</span>&#125;()<span class="hljs-keyword">return</span> t&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f3</span><span class="hljs-params">()</span> <span class="hljs-params">(r <span class="hljs-keyword">int</span>)</span></span> &#123;<span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r <span class="hljs-keyword">int</span>)</span></span> &#123;r = r + <span class="hljs-number">5</span>&#125;(r)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;fmt.Println(f())fmt.Println(f2())fmt.Println(f3())&#125;</code></pre><p>答案留在最后讲解</p><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>在说slice之前，我们先来了解下数组。</p><p>数组是指定长度和元素类型的数据集合。比如以下数组</p><pre><code class="hljs go"><span class="hljs-keyword">var</span> intArr [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span><span class="hljs-comment">//创建了长度为3的int数组</span>a[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span> <span class="hljs-comment">//根据索引访问元素</span>fmt.<span class="hljs-built_in">println</span>(a[<span class="hljs-number">1</span>])<span class="hljs-comment">//int 类型数组默认值为0</span></code></pre><p>数组不需要显式初始化。Go的数组是值类型。数组变量表示整个数组，它不是指向数组的第一个元素的指针，这就意味着赋值和函数传参操作时，将会复制数组的内容（后续和slice对比，slice是创建指针指向地址）。可以写一个简单的程序将数组的地址打印出来，进行对比。</p><h4 id="slice-1"><a href="#slice-1" class="headerlink" title="slice"></a>slice</h4><p>在实际使用中我们很少使用到数组，因为数组不够灵活。比如：一旦数组中的数据足够大，每次使用数组都要重新复制一遍，耗费大量内存和时间。slice并不会实际复制一份数据，它只是创建一个新的数据结构，包含了另外的一个指针，一个长度和一个容量数据。我们来看下slice在源码中的定义</p><pre><code class="hljs go"><span class="hljs-keyword">type</span> slice <span class="hljs-keyword">struct</span> &#123;array unsafe.Pointer<span class="hljs-comment">// 指向底层数组的指针</span><span class="hljs-built_in">len</span>   <span class="hljs-keyword">int</span><span class="hljs-comment">// 长度，切片可用元素的个数，slice的下标不能超过长度 </span><span class="hljs-built_in">cap</span>   <span class="hljs-keyword">int</span><span class="hljs-comment">// 容量 &gt;= 长度，在底层不扩容的情况下，cap是len的最大限度</span>&#125;</code></pre><p>需要注意的是：底层数组是可以被多个slice同时指向的，也就是对一个slice的元素进行修改会影响到其他的slice。</p><h5 id="slice的扩容"><a href="#slice的扩容" class="headerlink" title="slice的扩容"></a>slice的扩容</h5><p>在对slice进行append等操作时，可能会造成slice的自动扩容。我们来看下源码是怎么扩容的</p><pre><code class="hljs go"><span class="hljs-comment">// growslice handles slice growth during append.</span><span class="hljs-comment">// It is passed the slice element type, the old slice, and the desired new minimum capacity,</span><span class="hljs-comment">// and it returns a new slice with at least that capacity, with the old data</span><span class="hljs-comment">// copied into it.</span><span class="hljs-comment">// The new slice&#x27;s length is set to the old slice&#x27;s length,</span><span class="hljs-comment">// NOT to the new requested capacity.</span><span class="hljs-comment">// This is for codegen convenience. The old slice&#x27;s length is used immediately</span><span class="hljs-comment">// to calculate where to write new values during an append.</span><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> When the old backend is gone, reconsider this decision.</span><span class="hljs-comment">// The SSA backend might prefer the new length or to return only ptr/cap and save stack space.</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">growslice</span><span class="hljs-params">(et *_type, old slice, <span class="hljs-built_in">cap</span> <span class="hljs-keyword">int</span>)</span> <span class="hljs-title">slice</span></span> &#123;<span class="hljs-comment">//忽略部分源码</span>newcap := old.<span class="hljs-built_in">cap</span>doublecap := newcap + newcap<span class="hljs-keyword">if</span> <span class="hljs-built_in">cap</span> &gt; doublecap &#123;newcap = <span class="hljs-built_in">cap</span>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">if</span> old.<span class="hljs-built_in">len</span> &lt; <span class="hljs-number">1024</span> &#123;newcap = doublecap&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// Check 0 &lt; newcap to detect overflow</span><span class="hljs-comment">// and prevent an infinite loop.</span><span class="hljs-keyword">for</span> <span class="hljs-number">0</span> &lt; newcap &amp;&amp; newcap &lt; <span class="hljs-built_in">cap</span> &#123;newcap += newcap / <span class="hljs-number">4</span>&#125;<span class="hljs-comment">// Set newcap to the requested cap when</span><span class="hljs-comment">// the newcap calculation overflowed.</span><span class="hljs-keyword">if</span> newcap &lt;= <span class="hljs-number">0</span> &#123;newcap = <span class="hljs-built_in">cap</span>&#125;&#125;&#125;<span class="hljs-comment">//忽略部分源码</span><span class="hljs-keyword">return</span> slice&#123;p, old.<span class="hljs-built_in">len</span>, newcap&#125;&#125;</code></pre><p>当slice中的cap不够使用是会调用growslice函数进行扩容，具体的扩容规则是</p><ul><li>如果新的大小是当前大小2倍以上，则大小增长为新大小</li><li>如果当前大小小于1024，按每次2倍增长，否则每次按当前大小1/4增长。直到增长的大小超过或等于新大小。</li></ul><p>扩容之后，向 Go 内存管理器申请内存，将老 slice 中的数据复制过去，并且将 append 的元素添加到新的底层数组中。最后向 <code>growslice</code> 函数调用者返回一个新的 slice，这个 slice 的长度并没有变化，而容量却增大了。</p><h5 id="nil-slice-和空slice"><a href="#nil-slice-和空slice" class="headerlink" title="nil slice 和空slice"></a>nil slice 和空slice</h5><p>nil slice 是描述一个不存在的切片，也就是说它的指针指向nil，没有实际上地址，长度和容量也都为0。</p><p>而空的切片是是描述空的一个集合，但是它的指针指向了一个地址，长度和容量也为0。</p><p>nil切片和空切片很相似，长度和容量都是0，官方建议尽量使用 <code>nil</code> 切片。</p><table><thead><tr><th>创建方式</th><th>nil切片</th><th>空切片</th></tr></thead><tbody><tr><td>方式一</td><td>var s1 []int</td><td>var s2 = []int{}</td></tr><tr><td>方式二</td><td>var s4 = *new([]int)</td><td>var s3 = make([]int, 0)</td></tr><tr><td>长度</td><td>0</td><td>0</td></tr><tr><td>容量</td><td>0</td><td>0</td></tr><tr><td>和nil比较</td><td>true</td><td>false</td></tr></tbody></table><h4 id="slice-和unsafe-Pointer相互转换"><a href="#slice-和unsafe-Pointer相互转换" class="headerlink" title="slice 和unsafe.Pointer相互转换"></a>slice 和unsafe.Pointer相互转换</h4><p>在上一篇的cgo 部分中将c的数组转到go slice 部分中有涉及到unsafe.Pointer。</p><p>我们先来看看从slice中获取一块内存地址</p><pre><code class="hljs go">slice:=<span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>,<span class="hljs-number">10</span>)ptr:=unsafe.Pointer(&amp;slice[<span class="hljs-number">0</span>])<span class="hljs-comment">//获取数组中第一个元素的内存地址</span></code></pre><p>从内存指针构造出Go的slice结构会比较麻烦，总共有三种方式</p><p>第一种，先将<code>ptr</code>强制类型转换为另一种指针，一个指向<code>[1&lt;&lt;10]int</code>数组的指针，这里数组大小其实是假的。然后用slice操作取出这个数组的前10个，于是<code>s</code>就是一个10个元素的slice。</p><pre><code class="hljs go"><span class="hljs-keyword">var</span> ptr unsafe.Pointers := ((*[<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">10</span>]<span class="hljs-keyword">int</span>)(ptr))[:<span class="hljs-number">10</span>]</code></pre><p>第二种，模拟go 底层的slice结构，将结构体赋值给s。和第一种相比，这里的cap和1&lt;&lt;10意思是相同的</p><pre><code class="hljs go"><span class="hljs-keyword">var</span> ptr unsafe.Pointer<span class="hljs-keyword">var</span> s1 = <span class="hljs-keyword">struct</span> &#123;    addr <span class="hljs-keyword">uintptr</span>    <span class="hljs-built_in">len</span> <span class="hljs-keyword">int</span>    <span class="hljs-built_in">cap</span> <span class="hljs-keyword">int</span>&#125;&#123;ptr, length, length&#125;s := *(*[]<span class="hljs-keyword">byte</span>)(unsafe.Pointer(&amp;s1))</code></pre><p>第三种方法，通过reflect.SliceHeader的方式来构造slice。</p><pre><code class="hljs go"><span class="hljs-keyword">var</span> o []<span class="hljs-keyword">byte</span>sliceHeader := (*reflect.SliceHeader)((unsafe.Pointer(&amp;o)))sliceHeader.Cap = lengthsliceHeader.Len = lengthsliceHeader.Data = <span class="hljs-keyword">uintptr</span>(ptr)</code></pre><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p>不知道你是否得出文章开始代码的正确结果呢？</p><p> <code>defer</code> 会在当前函数或者方法返回之前执行传入的函数。它会经常被用于关闭文件描述符、关闭数据库连接以及解锁资源。要真正理解文章前面的问题，我们要理解<strong>return xxx这一条语句并不是一条原子指令!</strong></p><p>函数返回的过程是这样的：先给返回值赋值，然后调用defer表达式，最后才是返回到调用函数中。</p><p>defer表达式可能会在设置函数返回值之后，在返回到调用函数之前，修改返回值，使最终的函数返回值与你想象的不一致。</p><p>其实使用defer时，用一个简单的转换规则改写一下，就不会迷糊了。改写规则是将return语句拆成两句写，return xxx会被改写成:</p><pre><code class="hljs shell">返回值 = xxx调用defer函数空的return</code></pre><p> 这样你就能理解为啥会得出文章一开始函数的结果了。我们来查看下改写之后的代码</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f</span><span class="hljs-params">()</span> <span class="hljs-params">(result <span class="hljs-keyword">int</span>)</span></span> &#123;result = <span class="hljs-number">0</span> <span class="hljs-comment">//return语句不是一条原子调用，return xxx其实是赋值＋ret指令</span><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">//defer被插入到return之前执行，也就是赋返回值和ret指令之间</span>result++&#125;()<span class="hljs-keyword">return</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f2</span><span class="hljs-params">()</span> <span class="hljs-params">(r <span class="hljs-keyword">int</span>)</span></span> &#123;t := <span class="hljs-number">5</span>r = t <span class="hljs-comment">//赋值指令</span><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-comment">//defer被插入到赋值与返回之间执行，这个例子中返回值r没被修改过</span>t = t + <span class="hljs-number">5</span>&#125;()<span class="hljs-keyword">return</span> <span class="hljs-comment">//空的return指令</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f3</span><span class="hljs-params">()</span> <span class="hljs-params">(r <span class="hljs-keyword">int</span>)</span></span> &#123;r = <span class="hljs-number">1</span> <span class="hljs-comment">//给返回值赋值</span><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r <span class="hljs-keyword">int</span>)</span></span> &#123; <span class="hljs-comment">//这里改的r是传值传进去的r，不会改变要返回的那个r值</span>r = r + <span class="hljs-number">5</span>&#125;(r)<span class="hljs-keyword">return</span> <span class="hljs-comment">//空的return</span>&#125;</code></pre><p>接下来我们来看看另外一小段代码</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  startedAt := time.Now()<span class="hljs-keyword">defer</span> fmt.Println(time.Since(startedAt))time.Sleep(time.Second)&#125;<span class="hljs-comment">//输出结果并不是1s，而是几百纳秒</span></code></pre><p>上面的输出结果背后的原因是什么呢？经过分析，我们会发现调用 <code>defer</code> 关键字会立刻对函数中引用的外部参数进行拷贝，所以 <code>time.Since(startedAt)</code> 的结果不是在 <code>main</code> 函数退出之前计算的，而是在 <code>defer</code> 关键字调用时计算的，最终导致上述代码输出。当然上面的解决办法是很简单的。只要defer 那添加一个匿名函数就可以解决了。我们总结一下<code>defer</code> 关键字使用传值的方式传递参数时会进行预计算，导致不符合预期的结果。</p><p>参考：<a href="https://halfrost.com/go_slice/">深入解析go中slice底层实现</a></p><p><a href="https://www.cnblogs.com/qcrao-2018/p/10631989.html">深度解析Go语音之slice</a></p><p><a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/03.4.html">深入解析Go</a></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang 之 cgo</title>
    <link href="/2018/08/30/012_golang%E4%B9%8Bcgo/"/>
    <url>/2018/08/30/012_golang%E4%B9%8Bcgo/</url>
    
    <content type="html"><![CDATA[<p>使用golang开发有段时间，公司内部很多产品都是用golang开发的，除了底层核心的算法层是用C++ 写的，其他基本都是利用go进行封装对外提供给客户。由于底层是使用的是c++，上层使用的go，所以避免不了使用的cgo了。那什么是cgo呢？简单来说cgo支持创建调用C代码的Go包。下面我们来一步一步介绍cgo。</p><h3 id="cgo-的简单例子"><a href="#cgo-的简单例子" class="headerlink" title="cgo 的简单例子"></a>cgo 的简单例子</h3><p>让我们从一个简单的cgo 例子说起</p><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-comment">//#include &lt;stdio.h&gt;</span><span class="hljs-comment">//#include &lt;stdlib.h&gt;</span><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-comment">//该语句要单独写一行</span><span class="hljs-keyword">import</span> (   <span class="hljs-string">&quot;unsafe&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;   <span class="hljs-comment">//C.CString将go string 转换成C string</span>   s := C.CString(<span class="hljs-string">&quot;Hello, World\n&quot;</span>)   <span class="hljs-comment">// C.CString() 返回的 C 字符串是在堆上新创建的并且不受 GC 的管理，</span>   <span class="hljs-comment">// 使用完后需要自行调用 C.free() 释放，否则会造成内存泄露，</span>   <span class="hljs-comment">// 而且这种内存泄露pprof 也定位不出来</span>   <span class="hljs-keyword">defer</span> C.free(unsafe.Pointer(s))   <span class="hljs-comment">//C.puts 函数向标准输出窗口打印，</span>   C.puts(s)&#125;</code></pre><p>虽然上面的代码有注释了，但是还是有一些需要特别注意的。</p><ol><li><p>第二行到第五行，需要注意的是#include 前面的//，不要认为是注释。这里的意思是引用了C的标准库。这个//的注释是叫preamble。必须和底下的import “C” 中间挨着不能有空行的。否则会导致后面的编译无法通过。当然除了//也可以使用/**/。同时这里的import “C” 需要和其他的import 隔开，并不能放到同一个import中，否则程序无法检测是否包含cgo</p><pre><code class="hljs go"><span class="hljs-comment">//#include &lt;stdio.h&gt;</span><span class="hljs-comment">//#include &lt;stdlib.h&gt;</span><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;C&quot;</span></code></pre></li><li><p>第二个是main 函数里面的内容</p><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;   <span class="hljs-comment">//C.CString将go string 转换成C string</span>   s := C.CString(<span class="hljs-string">&quot;Hello, World\n&quot;</span>)   <span class="hljs-comment">// C.CString() 返回的 C 字符串是在堆上新创建的并且不受 GC 的管理，</span>   <span class="hljs-comment">// 使用完后需要自行调用 C.free() 释放，否则会造成内存泄露，</span>   <span class="hljs-comment">// 而且这种内存泄露pprof 也定位不出来</span>   <span class="hljs-keyword">defer</span> C.free(unsafe.Pointer(s))   <span class="hljs-comment">//C.puts 函数向标准输出窗口打印，</span>   C.puts(s)&#125;</code></pre><ul><li><p>Go代码中的<code>s</code>变量在传递给c代码使用完成之后，需要调用<code>C.free</code>进行释放。首先我们需要先看下golang的字符串和C中的字符串在底层中的内存模型。</p><p><img src="/images/golang/string.jpg"></p><p>从上图中我们可以看出golang 和 C 字符串在底层中的内存模型是不一样的。golang 字串符串并没有用 ‘\0’ 终止符标识字符串的结束，因此直接将 golang 字符串底层数据指针传递给 C 函数是不行的。一种方案类似切片的传递一样将字符串数据指针和长度传递给 C 函数后，C 函数实现中自行申请一段内存拷贝字符串数据然后加上未层终止符后再使用。更好的方案是使用标准库提供的 C.CString()将 golang 的字符串转换成 C 字符串然后传递给 C 函数调用。</p><p>我们看下官方文档对CString的说明。所以我们也就知道C.free的作用是什么了</p><pre><code class="hljs go"><span class="hljs-comment">// Go string to C string</span><span class="hljs-comment">// The C string is allocated in the C heap using malloc.</span><span class="hljs-comment">// It is the caller&#x27;s responsibility to arrange for it to be</span><span class="hljs-comment">// freed, such as by calling C.free (be sure to include stdlib.h</span><span class="hljs-comment">// if C.free is needed).</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">C</span>.<span class="hljs-title">CString</span><span class="hljs-params">(<span class="hljs-keyword">string</span>)</span> *<span class="hljs-title">C</span>.<span class="hljs-title">char</span></span><span class="hljs-comment">// 这个文档上的大概意思是</span><span class="hljs-comment">// C string在C的堆上使用malloc申请。调用者有责任在合适的时候对该字符串进行释放，释放方式可以是调用C.free（调用C.free需包含stdlib.h）</span></code></pre><p>我们来看看其他几种C类型和Go类型相互转换的。可以看出CBytes 也是需要我们手动free的。</p><pre><code class="hljs go"><span class="hljs-comment">// Go []byte slice to C array</span><span class="hljs-comment">// The C array is allocated in the C heap using malloc.</span><span class="hljs-comment">// It is the caller&#x27;s responsibility to arrange for it to be</span><span class="hljs-comment">// freed, such as by calling C.free (be sure to include stdlib.h</span><span class="hljs-comment">// if C.free is needed).</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">C</span>.<span class="hljs-title">CBytes</span><span class="hljs-params">([]<span class="hljs-keyword">byte</span>)</span> <span class="hljs-title">unsafe</span>.<span class="hljs-title">Pointer</span></span><span class="hljs-comment">// C string to Go string</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">C</span>.<span class="hljs-title">GoString</span><span class="hljs-params">(*C.char)</span> <span class="hljs-title">string</span></span><span class="hljs-comment">// C data with explicit length to Go string</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">C</span>.<span class="hljs-title">GoStringN</span><span class="hljs-params">(*C.char, C.<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">string</span></span><span class="hljs-comment">// C data with explicit length to Go []byte</span><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">C</span>.<span class="hljs-title">GoBytes</span><span class="hljs-params">(unsafe.Pointer, C.<span class="hljs-keyword">int</span>)</span> []<span class="hljs-title">byte</span></span></code></pre><p>一般来说，c语言里都是秉承哪个模块申请就由哪个模块释放的原则，因为跨库申请释放可能由于各自链接的内存管理库不一致导致出现难以排查的bug。并且换个角度来说，被调用模块也无法知道传入的内存是在堆上申请还是栈上申请的，是否需要释放。<br>所以Go传入c模块的内存，c模块也许会对这块内存再次进行拷贝，但是c模块肯定不会释放（即<code>free</code>）传入的这份内存。<br>所以，一般来说，Go在调用完c函数之后，Go需要释放拷贝生成的这块内存。</p></li></ul></li></ol><ul><li>其中需要留意的是unsafe.Pointer 这个函数。消除内存拷贝可以通过<code>unsafe.Pointer</code>获取原始指针进行传递。<code>unsafe.Pointer</code>是一种特殊意义的指针，它可以包含任意类型的地址，有点类似于C语言里的void*指针，全能型的。</li></ul><p>Go语言中数值类型和C语言数据类型基本上是相似的。但是还是有不同的。这里就不详细介绍了。更多的cgo 类型装换可以参考<a href="https://books.studygolang.com/advanced-go-programming-book/ch2-cgo/ch2-03-cgo-types.html">Go语言高级编程</a></p><h3 id="Go-和-C-之间的数组传递"><a href="#Go-和-C-之间的数组传递" class="headerlink" title="Go 和 C 之间的数组传递"></a>Go 和 C 之间的数组传递</h3><h4 id="Go数组到C"><a href="#Go数组到C" class="headerlink" title="Go数组到C"></a>Go数组到C</h4><p>我们还是直接来看下例子。我们在C 中遍历数组，并计算数组内值的和。</p><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-comment">/*</span><span class="hljs-comment">#include &lt;stdio.h&gt;</span><span class="hljs-comment">#include &lt;string.h&gt;</span><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><span class="hljs-comment"></span><span class="hljs-comment">int loop(int** list_data, int leng, char** data)</span><span class="hljs-comment">&#123;</span><span class="hljs-comment">  int* m = (int*)list_data;</span><span class="hljs-comment">  int sum = 0;</span><span class="hljs-comment">  for(int i=0; i&lt;leng; i++)</span><span class="hljs-comment">  &#123;</span><span class="hljs-comment">    sum += m[i];</span><span class="hljs-comment">  &#125;</span><span class="hljs-comment">  *data = &quot;finised task&quot;;</span><span class="hljs-comment">  return sum;</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">*/</span><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-comment">//该语句要单独写一行</span><span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;unsafe&quot;</span><span class="hljs-string">&quot;fmt&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GoSilence2CArray</span><span class="hljs-params">()</span></span> &#123;<span class="hljs-keyword">var</span> ids = []<span class="hljs-keyword">int32</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;<span class="hljs-keyword">var</span> res *C.charlength := C.<span class="hljs-keyword">int</span>(<span class="hljs-built_in">len</span>(ids))le := C.loop((**C.<span class="hljs-keyword">int</span>)(unsafe.Pointer(&amp;ids[<span class="hljs-number">0</span>])), length, &amp;res)fmt.Println(le)fmt.Println(C.GoString(res))fmt.Println(ids)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;GoSilence2CArray()&#125;</code></pre><p>整个例子需要注意的就是调用C.loop 函数的时候，将Go中的Slice传给C函数。其中最重要的loop的第一个参数，将数组转换的代码了。我们来看以下使用loop函数的写法。</p><pre><code class="hljs go"><span class="hljs-comment">//正确写法</span>le := C.loop((**C.<span class="hljs-keyword">int</span>)(unsafe.Pointer(&amp;ids[<span class="hljs-number">0</span>])), length, &amp;res)<span class="hljs-comment">//错误写法</span>le := C.loop((**C.<span class="hljs-keyword">int</span>)(unsafe.Pointer(&amp;ids)), length, &amp;res)</code></pre><p>Slice在Go中实际上不是一个完全意义上的数组，它只是一种数据结构，带有若干头部。如果直接&amp;ids，那相当于把ids这个数据结构的地址处的数据强制转换为<code>(**C.int)</code>。这样导致的后果完全不可期，运行时core掉是再正常不过的后果。所以正确的写法应该是<code>(**C.int)(unsafe.Pointer(&amp;ids[0]))</code>。从slice的第一个元素地址开始。对于slice的内部数据结构可以查看<a href="http://blog.golang.org/go-slices-usage-and-internals">slice的使用和内部结构</a></p><h4 id="C数组到Go-slice"><a href="#C数组到Go-slice" class="headerlink" title="C数组到Go slice"></a>C数组到Go slice</h4><p>还是直接看例子</p><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-comment">/*</span><span class="hljs-comment">#include &lt;stdio.h&gt;</span><span class="hljs-comment">#include &lt;string.h&gt;</span><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><span class="hljs-comment"></span><span class="hljs-comment">typedef struct&#123;</span><span class="hljs-comment">   char* name;</span><span class="hljs-comment">&#125;person;</span><span class="hljs-comment"></span><span class="hljs-comment">person* get_person(int n)&#123;</span><span class="hljs-comment">   person* ret = (person*)malloc(sizeof(person) * n);</span><span class="hljs-comment">   for(int i=0;i&lt;n;i++)&#123;</span><span class="hljs-comment">      ret[i].name=&quot;wu&quot;;</span><span class="hljs-comment">   &#125;</span><span class="hljs-comment">   return ret;</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">*/</span><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-comment">//该语句要单独写一行</span><span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;unsafe&quot;</span><span class="hljs-string">&quot;fmt&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CArray2GoSilence</span><span class="hljs-params">()</span></span> &#123;size := <span class="hljs-number">2</span>person := C.get_person(C.<span class="hljs-keyword">int</span>(size))person_array := (*[<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>]C.person)(unsafe.Pointer(person))<span class="hljs-keyword">var</span> names []<span class="hljs-keyword">string</span><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;name := C.GoString(person_array[i].name)names = <span class="hljs-built_in">append</span>(names, name)&#125;<span class="hljs-keyword">for</span> _, name := <span class="hljs-keyword">range</span> names &#123;fmt.Println(name)&#125;C.free(unsafe.Pointer(person))&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;CArray2GoSilence()&#125;</code></pre><p>C语言中的数组与Go语言中的数组差异较大，后者是值类型，而前者与C中的指针大部分场合都可以随意转换。目前似乎无法直接显式的在两者之间进行转型，官方文档也没有说明。但我们可以通过编写转换函数，将C的数组转换为Go的Slice。<code>(*[1 &lt;&lt; 30]C.person)(unsafe.Pointer(person))</code> 是获取足够大的内存地址，然后通过遍历该数组的地址。获取数组的元素。可以在for中将元素添加到slice中。</p><h3 id="cgo利用pkg-config-使用第三方的so库"><a href="#cgo利用pkg-config-使用第三方的so库" class="headerlink" title="cgo利用pkg_config 使用第三方的so库"></a>cgo利用pkg_config 使用第三方的so库</h3><h4 id="pkg-config"><a href="#pkg-config" class="headerlink" title="pkg_config"></a>pkg_config</h4><p>我们在使用第三方库的时候就少不了使用第三方库的头文件和库文件。我们在编译、链接的时候，必须要指定这些头文件和库的位置。<strong>pkg-config</strong> 是一个在<a href="https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a><a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91">编译</a>时查询已安装的<a href="https://zh.wikipedia.org/wiki/%E5%BA%93">库</a>的使用接口的计算机工具<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6">软件</a>。pkg-config原本是设计用于<a href="https://zh.wikipedia.org/wiki/Linux">Linux</a>的，但现在在各个版本的<a href="https://zh.wikipedia.org/wiki/BSD">BSD</a>、<a href="https://zh.wikipedia.org/wiki/Windows">windows</a>、<a href="https://zh.wikipedia.org/wiki/Mac_OS_X">Mac OS X</a>和<a href="https://zh.wikipedia.org/wiki/Solaris">Solaris</a>上都有着可用的版本。</p><p>那么pkg-config有什么作用呢？</p><ol><li>检查库的版本号。如果所需要的库的版本不满足要求，它会打印出错误信息，避免链接错误版本的库文件。</li><li>获得编译预处理参数，如宏定义，头文件的位置。</li><li>得链接参数，如库及依赖的其它库的位置，文件名及其它一些连接参数。</li><li>自动加入所依赖的其它库的设置。</li></ol><p>pkg-config是如和得到这些信息呢？为了让pkg-config可以得到这些信息，要求库的提供者，提供一个.pc文件。以下是这是一个用于<a href="https://zh.wikipedia.org/w/index.php?title=Libpng&action=edit&redlink=1">libpng</a>的.pc文件的样例:</p><pre><code class="hljs shell">prefix=/usr/localexec_prefix=$&#123;prefix&#125;libdir=$&#123;exec_prefix&#125;/libincludedir=$&#123;exec_prefix&#125;/include  Name: libpng12Description: Loads and saves PNG filesVersion: 1.2.8Libs: -L$&#123;libdir&#125; -lpng12 -lzCflags: -I$&#123;includedir&#125;/libpng12</code></pre><p>这个文件告诉我们这些库可以在/usr/local/lib找到，头文件可以在/usr/local/include里找到，库的名字是libpng12并且版本号是1.2.8。它也提供了用于编译依赖于libpng的源代码时需要的链接器参数。</p><p>pkg-config默认会去/usr/local/lib/pkgconfig目录下，寻找.pc文件。</p><h4 id="cgo-使用pkg-config"><a href="#cgo-使用pkg-config" class="headerlink" title="cgo 使用pkg-config"></a>cgo 使用pkg-config</h4><p>我们先来看下cgo 中使用pkg-config的例子。以下是我做餐盘识别项目中涉及到cgo部分</p><pre><code class="hljs go"><span class="hljs-keyword">package</span> cgo<span class="hljs-comment">// #cgo pkg-config: megproduct</span><span class="hljs-comment">// #cgo CXXFLAGS: -std=c++11</span><span class="hljs-comment">// #include &quot;plate.h&quot;</span><span class="hljs-comment">// #include &quot;stdlib.h&quot;</span><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;C&quot;</span><span class="hljs-comment">//后续使用方法和go 调用C的方式一致了</span></code></pre><p>我们可以看到cgo有配置pkg-config的配置文件megproduct.pc，这个pc文件可以放在/usr/local/lib/pkgconfig目录下，也可以将其添加到环境变量PKG_CONFIG_PATH中。根据megproduct.pc 查找库的头文件和so文件。</p><p>我们来看下megproduct.pc 是咋样的</p><pre><code class="hljs shell">prefix=/go/DATA/plate-sdk-190710libdir=$&#123;prefix&#125;/libincludedir=$&#123;prefix&#125;/includeName: megproductDescription: megproduct, built in megproductVersion: 1.1Requires:Libs: $&#123;libdir&#125;/libmegproduct.soLibs.private: -Wl,--push-state,--as-needed,-lpthread,-lrt,-ldl,-lm,--pop-stateCflags: -I$&#123;includedir&#125;</code></pre><p>使用pkg-config少了很多配置的文件。所以如果使用第三方库进行cgo 开发还是建议使用pkg-config</p><p>本篇文章更多讲的是cgo的使用，并没有涉及到底层cgo的内部实现，后续如果有时间会对cgo 底层的实现讲解。</p><p>参考：<a href="https://www.pengrl.com/p/29054/">Go语言使用cgo时的内存管理笔记</a></p><p>​            <a href="https://golang.org/cmd/cgo/">官方文档</a></p><p>​            <a href="http://blog.golang.org/go-slices-usage-and-internals">slice的使用和内部结构</a></p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang cgo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL系列五之原理及性能</title>
    <link href="/2018/08/25/011_MySQL%E7%B3%BB%E5%88%97%E4%BA%94/"/>
    <url>/2018/08/25/011_MySQL%E7%B3%BB%E5%88%97%E4%BA%94/</url>
    
    <content type="html"><![CDATA[<h3 id="索引原理分析"><a href="#索引原理分析" class="headerlink" title="索引原理分析"></a>索引原理分析</h3><p>MySQL的索引是由<strong>存储引擎</strong>来实现的。由于存储引擎不同，所以具有不同的索引类型，如BTree索引，B+Tree索引，哈希索引，全文索引等。MySQL的InnoDB引擎就是基于B+Tree索引的。</p><p>聚簇索引和非聚簇索引：<a href="https://www.cnblogs.com/rjzheng/p/9915754.html">https://www.cnblogs.com/rjzheng/p/9915754.html</a></p><p>B+tree</p><h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><ol><li><p>主键索引：即主索引，根据主键pk_clolum（length）建立索引，<strong>不允许重复，不允许空值</strong></p><pre><code class="hljs mysql">ALTER TABLE &#39;table_name&#39; ADD PRIMARY KEY pk_index(&#39;col&#39;)；</code></pre></li><li><p>唯一索引：用来建立索引的列的值必须是<strong>唯一的，允许空值</strong></p><pre><code class="hljs mysql">ALTER TABLE &#39;table_name&#39; ADD UNIQUE index_name(&#39;col&#39;)；</code></pre></li><li><p>普通索引：用表中的普通列构建的索引，没有任何限制</p><pre><code class="hljs mysql">ALTER TABLE &#39;table_name&#39; ADD INDEX index_name(&#39;col&#39;)；</code></pre></li><li><p>全文索引：用大文本对象的列构建的索引</p><pre><code class="hljs mysql">ALTER TABLE &#39;table_name&#39; ADD FULLTEXT INDEX ft_index(&#39;col&#39;)；</code></pre></li><li><p>组合索引：用多个列组合构建的索引，这多个列中的值<strong>不允许有空值</strong></p><pre><code class="hljs mysql">ALTER TABLE &#39;table_name&#39; ADD INDEX index_name(&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;)；</code></pre><ul><li>遵循“最左前缀”原则，把最常用作为检索或排序的列放在最左，依次递减，组合索引*<strong>*相当于建立了col1,col1col2,col1col2col3三个索引**</strong>，而col2或者col3是不能使用索引的。</li><li>在使用组合索引的时候可能因为列名长度过长而导致索引的key太大，导致效率降低，在允许的情况下，可以只取col1和col2的前几个字符作为索引</li></ul></li></ol><h4 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h4><h5 id="什么时候使用索引"><a href="#什么时候使用索引" class="headerlink" title="什么时候使用索引"></a>什么时候使用索引</h5><ul><li><p>主键自动建立唯一索引</p></li><li><p>经常作为查询条件在WHERE或者ORDER BY 语句中出现的列要建立索引</p></li><li><p>作为排序的列要建立索引</p></li><li><p>查询中与其他表关联的字段，外键关系建立索引</p></li><li><p>高并发条件下倾向组合索引</p></li><li><p>用于聚合函数的列可以建立索引，例如使用了max(column_1)或者count(column_1)时的column_1就需要建立索引</p></li></ul><h5 id="什么时候不要使用索引"><a href="#什么时候不要使用索引" class="headerlink" title="什么时候不要使用索引"></a>什么时候不要使用索引</h5><ul><li>经常增删改的列不要建立索引</li><li>有大量重复的列不建立索引</li><li>表记录太少不要建立索引</li></ul><h5 id="如何使用索引"><a href="#如何使用索引" class="headerlink" title="如何使用索引"></a>如何使用索引</h5><ol><li><p>查看表中的索引</p><pre><code class="hljs mysql">SHOW INDEX FROM tablename</code></pre></li><li><p>查看查询语句使用索引的情况，查询语句加<strong>explain</strong></p><pre><code class="hljs mysql">explain SELECT * FROM table_name WHERE column_1&#x3D;&#39;123&#39;;</code></pre></li><li><p>创建索引</p><pre><code class="hljs mysql">-- 创建表时添加所有，indexCREATE TABLE mytable(      ID INT NOT NULL,       username VARCHAR(16) NOT NULL,      INDEX [indexName] (username(length))  );-- 创建表之后添加索引ALTER TABLE my_table ADD [UNIQUE] INDEX index_name(column_name);-- 或者CREATE INDEX index_name ON my_table(column_name);</code></pre></li><li><p>删除索引</p><pre><code class="hljs mysql">DROP INDEX my_index ON tablename;ALTER TABLE table_name DROP INDEX index_name;</code></pre></li><li><p>根据索引查询，以下为使用的一部分</p><pre><code class="hljs mysql">SELECT * FROM table_name WHERE column_1&#x3D;column_2;-- (为column_1建立了索引)SELECT * FROM table_name WHERE column_1 LIKE &#39;三%&#39;SELECT * FROM table_name WHERE column_1 LIKE &#39;_好_&#39;</code></pre></li></ol><h5 id="索引失效原因"><a href="#索引失效原因" class="headerlink" title="索引失效原因"></a>索引失效原因</h5><ul><li>在组合索引中不能有列的值为NULL，如果有，那么这一列对组合索引就是无效的。</li><li>在一个SELECT语句中，索引只能使用一次，如果在WHERE中使用了，那么在ORDER BY中就不要用了。</li><li>LIKE操作中，’%aaa%’不会使用索引，也就是索引会失效，但是‘aaa%’可以使用索引。</li><li>在索引的列上使用表达式或者函数会使索引失效，例如：select * from users where YEAR(adddate)&lt;2007</li><li>在查询条件中使用不等于，包括&lt;符号、&gt;符号和！=会导致索引失效。特别的是如果对主键索引使用！=则不会使索引失效，如果对主键索引或者整数类型的索引使用&lt;符号或者&gt;符号不会使索引失效。（不等于，包括&lt;符号、&gt;符号和！，如果占总记录的比例很小的话，也不会失效）</li><li>在查询条件中使用IS NULL或者IS NOT NULL会导致索引失效。</li><li>字符串不加单引号会导致索引失效。更准确的说是类型不一致会导致失效，比如字段email是字符串类型的，使用WHERE email=99999 则会导致失败。</li><li>在查询条件中使用OR连接多个条件会导致索引失效，除非OR链接的每个条件都加上索引，这时应该改为两次查询，然后用UNION ALL连接起来</li><li>如果排序的字段使用了索引，那么select的字段也要是索引字段，否则索引失效。特别的是如果排序的是主键索引则select * 也不会导致索引失效。</li><li>尽量不要包括多列排序，如果一定要，最好为这队列构建组合索引</li></ul><h3 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h3><p>简单来说，执行计划是Mysql执行一条sql 时的表现，包括SQL查询的顺序、是否使用索引、以及使用的索引信息等内容，通常用于SQL的性能分析、优化等场景。</p><p>基本语法是：SQL语句前面添加关键字 explain</p><pre><code class="hljs sql"><span class="hljs-keyword">explain</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> <span class="hljs-keyword">id</span> &gt;=<span class="hljs-number">2</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">name</span></code></pre><p>mysql 执行计划主要包含以下信息</p><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_length</th><th>ref</th><th>rows</th><th>extra</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li><p><strong>id</strong> 表示各个子查询执行的顺序</p><ul><li>id 相同执行顺序由上至下</li><li>id 不同，id 值越大越先被执行</li></ul></li><li><p><strong>select_type</strong> 查询数据的操作类型</p><table><thead><tr><th>select_type</th><th>说明</th></tr></thead><tbody><tr><td>SIMPLE</td><td>不包含任何子查询或union等查询</td></tr><tr><td>PRIMARY</td><td>包含子查询最外层查询就显示为 <code>PRIMARY</code></td></tr><tr><td>SUBQUERY</td><td>在<code>select</code>或 <code>where</code>字句中包含的查询</td></tr><tr><td>DERIVED</td><td><code>from</code>字句中包含的查询</td></tr><tr><td>UNION</td><td>出现在<code>union</code>后的查询语句中</td></tr><tr><td>UNION RESULT</td><td>从UNION中获取结果集</td></tr></tbody></table></li><li><p><strong>table</strong> 输出的行所引用的表</p></li><li><p><strong>partitions</strong> 如果查询是基于分区表的话，显示查询将访问的分区。</p></li><li><p><strong>type</strong> 表示访问类型，性能由高到底，system const 性能最高，ALL性能最低。一般来说，得保证查询至少达到range级别，最好能达到ref。</p><table><thead><tr><th>type</th><th>说明</th></tr></thead><tbody><tr><td>system const</td><td>连接类型的特例，查询的表为系统表</td></tr><tr><td>const</td><td>使用主键或者唯一索引，且匹配的结果只有一条记录</td></tr><tr><td>eq_ref</td><td>在<code>join</code>查询中使用<code>PRIMARY KEY</code>or<code>UNIQUE NOT NULL</code>索引关联</td></tr><tr><td>ref</td><td>使用非唯一索引查找数据</td></tr><tr><td>fulltext</td><td>使用全文索引</td></tr><tr><td>ref_or_null</td><td>对<code>Null</code>进行索引的优化的 ref</td></tr><tr><td>unique_subquery</td><td>在子查询中使用 eq_ref</td></tr><tr><td>index_subquery</td><td>在子查询中使用 ref</td></tr><tr><td>range</td><td>索引范围查找</td></tr><tr><td>index</td><td>遍历索引</td></tr><tr><td>ALL</td><td>扫描全表数据</td></tr></tbody></table></li><li><p><strong>possible_keys</strong> 指出MySQL能使用哪个索引在该表中找到行。查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用。如果该值为 NULL，说明没有使用索引，可以建立索引提高性能。</p></li><li><p><strong>key</strong> 显示MySQL实际决定使用的键。如果没有索引被选择，键是NULL</p></li><li><p><strong>key_length</strong> 表示索引中使用的字节数，通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好显示的是索引字段的最大长度，并非实际使用长度</p></li><li><p><strong>ref</strong> 显示该表的索引字段关联了哪张表的哪个字段</p></li><li><p><strong>rows</strong> 根据表统计信息及选用情况，大致估算出找到所需的记录或所需读取的行数，数值越小越好。</p></li><li><p><strong>extra</strong> 包含不适合在其他列中显示但十分重要的额外信息</p><table><thead><tr><th>extra</th><th>说明</th></tr></thead><tbody><tr><td>Using filesort</td><td>表示 mysql 对结果集进行外部排序，不能通过索引顺序达到排序效果。一般有 using filesort都建议优化去掉，因为这样的查询 cpu 资源消耗大，延时大。</td></tr><tr><td>using temporary</td><td>查询有使用临时表, 一般出现于排序， 分组和多表 join 的情况， 查询效率不高，建议优化。</td></tr><tr><td>using index</td><td>使用覆盖索引，避免了访问表的数据行。效率不错</td></tr><tr><td>Using where</td><td>sql使用了where过滤,效率较高</td></tr></tbody></table></li></ul><h3 id="性能分析思路"><a href="#性能分析思路" class="headerlink" title="性能分析思路"></a>性能分析思路</h3><h4 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h4><ol><li><p>通过命令查看MySQL的状态，来找到系统瓶颈。以下都是已经登录mysql 之后使用的命令。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 显示状态信息,show status like ‘XXX’</span>show status;<span class="hljs-meta">#</span><span class="bash">显示系统变量,show variables like ‘XXX’</span>show variables;<span class="hljs-meta">#</span><span class="bash">显示InnoDB存储引擎的状态</span>show engine innodb status;<span class="hljs-meta">#</span><span class="bash">查看当前SQL执行，包括执行状态、是否锁表等</span>show processlist;</code></pre><p>以下为退出MySQL登录之后执行</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 显示状态信息</span>mysqladmin extended-status -u username -p password<span class="hljs-meta">#</span><span class="bash">显示系统变量</span>mysqladmin variables -u root -p password</code></pre><p>常用的主要是show status和show processlist</p></li><li><p>慢日志查询。慢查询日志可以帮助我们知道哪些SQL语句执行效率低下</p><pre><code class="hljs sql"><span class="hljs-comment">-- 检查是否开启</span><span class="hljs-keyword">show</span> <span class="hljs-keyword">variables</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%slow%&#x27;</span>;<span class="hljs-comment">-- 如果没有开启，也可以在运行时开启这个参数。说明是动态参数</span><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> slow_query_log=<span class="hljs-keyword">ON</span>;<span class="hljs-comment">-- 设置慢查询记录查询耗时多长的SQL,这里演示用100毫秒</span><span class="hljs-keyword">set</span> long_query_time = <span class="hljs-number">0.1</span>;</code></pre><p>日志文件在/var/lib/mysql/mysql目录下，如果不在查看下MySQL的配置文件。</p></li><li><p>explain分析查询。具体使用参考<strong>执行计划</strong>部分内容。</p></li><li><p>profiling分析查询。通过profiling命令得到更准确的SQL执行消耗系统资源的信息。profiling默认是关闭的。</p><pre><code class="hljs sql"><span class="hljs-comment">-- 查看是否开启profiling</span><span class="hljs-keyword">select</span> @@profiling;<span class="hljs-comment">-- 开profiling。注意测试完关闭该特性，否则耗费资源</span><span class="hljs-keyword">set</span> profiling=<span class="hljs-number">1</span>;<span class="hljs-comment">-- 查看所有记录profile的SQL</span><span class="hljs-keyword">show</span> <span class="hljs-keyword">profiles</span>;<span class="hljs-comment">-- 查看指定ID的SQL的详情</span><span class="hljs-keyword">show</span> profile <span class="hljs-keyword">for</span> <span class="hljs-keyword">query</span> <span class="hljs-number">1</span>;<span class="hljs-comment">-- 测试完，关闭该特性</span><span class="hljs-keyword">set</span> profiling=<span class="hljs-number">0</span>;</code></pre></li></ol><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><p>当MySQL发现性能问题。以下是一些优化思路。</p><ol><li>优化SQL语句。以下是一些SQL使用建议<ul><li>当结果集只有一行数据时使用LIMIT 1</li><li>多用like、不用null和where</li><li>在join的时候中结果集更小的部分join更大的部分，这样可以减少缓存的开销</li><li>避免SELECT *，始终指定你需要的列。从表中读取越多的数据，查询会变得更慢。</li><li>使用连接（JOIN）来代替子查询(Sub-Queries) : 连接（JOIN）.. 之所以更有效率一些，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上的需要两个步骤的查询工作。</li><li>用ENUM、CHAR 而不是VARCHAR，使用合理的字段属性长度</li><li>尽可能的使用NOT NULL</li><li>拆分大的DELETE 或INSERT 语句</li><li>查询的列越小越快</li></ul></li><li>建立索引。索引建立参考上面部分。索引使用建议<ul><li>索引字段上不用mysql函数</li><li>在= 、group by 和 order by字段上面加上索引</li><li>一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</li><li>在使用in的时候可以尝试使用exists试试</li><li>在join的时候减少extra字段中临时表的数量</li><li>越小的数据类型通常更好：越小的数据类型通常在磁盘、内存和CPU缓存中都需要更少的空间，处理起来更快。</li><li>简单的数据类型更好：整型数据比起字符，处理开销更小，因为字符串的比较更复杂。在MySQL中，应该用内置的日期和时间数据类型，而不是用字符串来存储时间；以及用整型数据类型存储IP地址。</li></ul></li></ol><p>参考：<a href="https://blog.csdn.net/tongdanping/article/details/79878302">https://blog.csdn.net/tongdanping/article/details/79878302</a></p><p>​            <a href="https://juejin.im/post/5a52386d51882573443c852a">https://juejin.im/post/5a52386d51882573443c852a</a><br>​            <a href="https://kaimingwan.com/post/shu-ju-ku/mysqlxing-neng-fen-xi-fang-fa-gong-ju-jing-yan-zong-jie">https://kaimingwan.com/post/shu-ju-ku/mysqlxing-neng-fen-xi-fang-fa-gong-ju-jing-yan-zong-jie</a></p>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL系列四之执行流程及架构</title>
    <link href="/2018/08/22/010_MySQL%E7%B3%BB%E5%88%97%E5%9B%9B/"/>
    <url>/2018/08/22/010_MySQL%E7%B3%BB%E5%88%97%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[<p>前面几篇主要讲了MySQL一些实际上的使用，但是对整个mysql架构上的一些还是不够了解，熟悉mysql的架构还是对于我们很有帮助的。MySQL体系结构描述了MySQL系统的不同组件之间如何相互联系。MySQL体系结构基本上是一个客户端-服务器系统。MySQL数据库服务器是服务器，连接到MySQL数据库服务器的应用程序是客户端。</p><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>我们执行一条sql语句的时候，MySQL的执行流程是怎么样的呢？</p><ol><li><p>MySQL客户端通过协议将SQL语句发送给MySQL服务器。</p></li><li><p>MySQL服务器先检查查询缓存，如果命中了缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段。</p></li><li><p>MySQL服务器服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划。(查询缓存默认不开启）</p></li><li><p>MySQL根据优化器生成的执行计划，再调用存储引擎的API来执行查询。</p></li><li><p>将结果返回给客户端，如果开启查询缓存，则会备份一份到查询缓存中。</p></li></ol><p>知道执行流程之后，我们看下MySQL的架构图。</p><p><img src="/images/mysql/MySQL_Architecture.jpg"></p><p>mysql 逻辑架构主要分为三层</p><ol><li>应用层<ul><li>这一层是在体系结构中的最顶层，可以在许多客户端-服务端体系结构中看到同一层。这一层包括一些大多数客户端-服务端应用程序共有的服务。从架构图中我们可以看到Client Connections 和Connect Pool。</li></ul></li><li>核心服务层<ul><li>该层负责MySQL关系数据库管理系统的所有逻辑功能。MySQL服务器的大脑位于这一层。包括查询解析、分析、优化、缓存、内置函数(比如 : 时间、数学、加密等函数)，所有的跨存储引擎的功能也在这一层实现 : 存储过程、触发器、视图等</li></ul></li><li>存储引擎层<ul><li>可插入的存储引擎功能使MySQL成为大多数开发人员的独特且首选的选择。插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离。MySQL使我们可以根据不同的情况和要求选择各种存储引擎。</li></ul></li></ol><h3 id="架构服务"><a href="#架构服务" class="headerlink" title="架构服务"></a>架构服务</h3><h4 id="应用层的服务"><a href="#应用层的服务" class="headerlink" title="应用层的服务"></a>应用层的服务</h4><h5 id="链接处理"><a href="#链接处理" class="headerlink" title="链接处理"></a>链接处理</h5><p>MySQL首先是一个网络程序，其在TCP之上定义了自己的<a href="https://dev.mysql.com/doc/internals/en/client-server-protocol.html">应用层协议</a>。所以要使用MySQL，我们可以编写代码，跟MySQL Server建立TCP连接，之后按照其定义好的协议进行交互。当然自己编写代码是比较麻烦的，我们也可以直接通过SDK进行链接如JDBC，ODBC等。当客户端连接到服务器时，客户端将获得自己的线程进行连接。来自该客户端的所有查询在该指定线程内执行。该线程由服务器缓存，因此不需要为每个新连接创建和销毁它们。</p><h5 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h5><p>每当客户端连接到MySQL服务器时，服务器都会在服务器端执行身份验证。身份验证基于用户名，客户端主机和客户端用户密码。</p><h5 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h5><p>客户端成功连接到MySQL服务器后，服务器将检查该特定客户端是否具有对MySQL服务器发出某些查询的特权。</p><h4 id="核心服务层的服务"><a href="#核心服务层的服务" class="headerlink" title="核心服务层的服务"></a>核心服务层的服务</h4><h5 id="MySQL服务和实用程序"><a href="#MySQL服务和实用程序" class="headerlink" title="MySQL服务和实用程序"></a>MySQL服务和实用程序</h5><p>MySQL相对提供了广泛的服务和实用程序。这是MySQL普及的主要原因之一。该层提供了用于管理和维护MySQL系统的服务和实用程序。</p><ul><li>备份和恢复</li><li>安全</li><li>复制</li><li>簇</li><li>分区</li><li>工作台</li></ul><h5 id="SQL接口"><a href="#SQL接口" class="headerlink" title="SQL接口"></a>SQL接口</h5><p>SQL是一种查询语言，用于查询Mysql 服务器，它是在MySQL客户端用户和服务器之间进行交互的工具。支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定义函数等多种SQL语言接口。</p><h5 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h5><p>MySQL会解析SQL查询，并为其创建语法树，并根据数据字典丰富查询语法树，会验证该客户端是否具有执行该查询的权限。创建好语法树后，MySQL还会对SQl查询进行语法上的优化，进行查询重写。具体步骤如下：</p><ul><li>在解析常规语句时，首先进行词法分析（从字符流中生成单词或标记）。</li><li>语法分析（使“句子”成为可能），语义分析（确保使这些句子确实有意义）和代码生成（对于编译器而言）在所有代码阶段都一次完成。 </li></ul><h5 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h5><p>语法解析和查询重写之后，MySQL会根据语法树和数据的统计信息对SQL进行优化，包括决定表的读取顺序、选择合适的索引等，最终生成SQL的具体执行步骤。这些具体的执行步骤里真正的数据操作都是通过预先定义好的存储引擎API来进行的，<strong>与具体的存储引擎实现无关</strong>。</p><h5 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h5><p>MySQL缓存（查询缓存）存储<strong>SELECT</strong> 语句的完整结果集。甚至在解析查询之前，MySQL服务器都会查询查询缓存。如果任何客户端发出的查询与缓存中已经存在的查询相同，则服务器仅跳过解析，优化甚至执行，它仅显示缓存中的输出。</p><h4 id="存储引擎层的服务"><a href="#存储引擎层的服务" class="headerlink" title="存储引擎层的服务"></a>存储引擎层的服务</h4><p>存储引擎的具体实现，这些存储引擎都实现了MySQl定义好的存储引擎API的部分或者全部。MySQL可以动态安装或移除存储引擎，可以有多种存储引擎同时存在，可以为每个Table设置不同的存储引擎。存储引擎负责在文件系统之上，管理表的数据、索引的实际内容，同时也会管理运行时的Cache、Buffer、事务、Log等数据和功能。</p><pre><code class="hljs mysql">-- 查看MySQL支持的存储引擎SHOW ENGINES;</code></pre><p><strong>MySQL5.5以后默认使用InnoDB存储引擎</strong>，其中InnoDB和BDB提供事务安全表，其它存储引擎都是非事务安全表。</p><h5 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h5><p>InnoDB引入了行级锁定和外键约束，在以下场合下，使用InnoDB是最理想的选择：</p><ol><li>更新密集的表。InnoDB存储引擎特别适合处理多重并发的更新请求。</li><li>事务。InnoDB存储引擎是支持事务的标准MySQL存储引擎。</li><li>自动灾难恢复。与其它存储引擎不同，InnoDB表能够自动从灾难中恢复。</li><li>外键约束。MySQL支持外键的存储引擎只有InnoDB。</li><li>支持自动增加列AUTO_INCREMENT属性。</li></ol><h5 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h5><p>在5.1之前，MyISAM是默认的引擎，MyISAM有大量的特心态，包括全文索引、压缩、空间函数。但是MyISAM不支持事务和行级锁，而且在崩溃后无法安全恢复。即使后续版本中MyISAM支持了事务，但是很多人的概念中依然是不支持事务的引擎。</p><p>MyISAM存储引擎特别适合在以下几种情况下使用：</p><ol><li>选择密集型的表。MyISAM存储引擎在筛选大量数据时非常迅速，这是它最突出的优点。</li><li>插入密集型的表。MyISAM的并发插入特性允许同时选择和插入数据。例如：MyISAM存储引擎很适合管理邮件或Web服务器日志数据。</li></ol><p><a href="https://zhuanlan.zhihu.com/p/53619907">更多引擎介绍</a></p><p>本文参考：<a href="https://www.rathishkumar.in/2016/04/understanding-mysql-architecture.html">https://www.rathishkumar.in/2016/04/understanding-mysql-architecture.html</a></p><p>​                    <a href="https://zhuanlan.zhihu.com/p/53619907">https://zhuanlan.zhihu.com/p/53619907</a></p><p>​                    <a href="https://www.cnblogs.com/qq1148932219/p/11694064.html">https://www.cnblogs.com/qq1148932219/p/11694064.html</a></p>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL系列三之事务和锁</title>
    <link href="/2018/08/18/009_MySQL%E7%B3%BB%E5%88%97%E4%B8%89/"/>
    <url>/2018/08/18/009_MySQL%E7%B3%BB%E5%88%97%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<p>本篇来讲讲MySQL的事务以及锁</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务是保证多个SQL操作的一致性，如果有一条SQL语句操作失败，则全部的SQL语句都失效。简单的说事务就是一组原子性的SQL语句。可以将这组语句理解成一个工作单元，要么全部执行要么都不执行。</p><p>至于支不支持事务是和MySQL的存储引擎相关的，我们这边使用的是MySQL8.0的版本，使用的默认引擎是InnoDB（MySQL5.5以后默认使用InnoDB存储引擎），而InnoDB是支持事务的。如果是其他版本的MySQL可以通过以下SQL语句查询。</p><pre><code class="hljs mysql">show engins;</code></pre><h4 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h4><p>事务具有以下的特性</p><ul><li><p>原子性</p><p>事务中的所有操作要么全部提交成功，要么全部失败回滚。比如从取款机取钱，这个事务可以分成两个步骤:1划卡，2出钱。不可能划了卡，而钱却没出来，这两步必须同时完成，要么就不完成。</p></li><li><p>一致性</p><p>数据库总是从一个一致性的状态转换到另一个一致性的状态。</p></li><li><p>隔离性</p><p>一个事务所做的修改在提交之前对其它事务是不可见的。两个以上的事务不会出现交错执行的状态，因为这样可能会导致数据不一致。</p></li><li><p>持久性</p><p>一旦事务提交，其所做的修改便会永久保存在数据库中。</p></li></ul><p>Mysql的提交默认是自动提交，即发送一条sql执行一条。</p><h4 id="事务的提交"><a href="#事务的提交" class="headerlink" title="事务的提交"></a>事务的提交</h4><p>执行 <code>START TRANSACTION</code> 或 <code>BEGIN</code> 语句后，表示要开启一项事务处理。</p><ul><li>COMMIT 提交事务</li><li>ROLLBACK 回滚事务</li></ul><pre><code class="hljs mysql">START TRANSACTION;-- 或者beginINSERT INTO stu (class_id,sname,sex)VALUES(2,&#39;张帝&#39;,&#39;女&#39;);COMMIT; -- rollback 回滚事务</code></pre><h4 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h4><p>在上面我们说到事务具有隔离性，那么为什么事务需要隔离性呢？</p><p>当高并发访问会遇到多个事务的隔离问题，可能会出现以下问题：</p><ol><li>脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li><li>不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</li><li>幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</li></ol><blockquote><p>不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p></blockquote><p>MySQL拥有不同的事务隔离级别</p><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>说明</th></tr></thead><tbody><tr><td>读未提交（read-uncommitted）</td><td>是</td><td>是</td><td>是</td><td>最低的事务隔离级别，一个事务还没提交时，它做的变更就能被别的事务看到</td></tr><tr><td>不可重复读（read-committed）</td><td>否</td><td>是</td><td>是</td><td>保证一个事物提交后才能被另外一个事务读取。另外一个事务不能读取该事物未提交的数据。</td></tr><tr><td>可重复读（repeatable-read）</td><td>否</td><td>否</td><td>是</td><td>多次读取同一范围的数据会返回第一次查询的快照，即使其他事务对该数据做了更新修改。事务在执行期间看到的数据前后必须是一致的。</td></tr><tr><td>串行化（serializable）</td><td>否</td><td>否</td><td>否</td><td>事务 100% 隔离，可避免脏读、不可重复读、幻读的发生。花费最高代价但最可靠的事务隔离级别。</td></tr></tbody></table><h4 id="查询-设置MySQL的事务隔离级别"><a href="#查询-设置MySQL的事务隔离级别" class="headerlink" title="查询/设置MySQL的事务隔离级别"></a>查询/设置MySQL的事务隔离级别</h4><p>InoDB默认的事务隔离级别是repeatable-read</p><pre><code class="hljs mysql">-- 查询本次会话的事务隔离级别SELECT @@SESSION.transaction_isolation-- 查询全局的事务隔离级别SELECT @@GLOBAL.transaction_isolation-- 设置本次会话的事务隔离级别SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;-- 设置全局的事务隔离级别SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;</code></pre><h3 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h3><p>因为Mysql支持多线程方式，所以可以同时处理多个客户端请求。但是为了防止客户端同时修改数据，所以有了锁的机制。锁的等级主要分为以下几种</p><ul><li><p>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高 ，并发度最低。</p></li><li><p>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p></li><li><p>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p></li></ul><p><code>InnoDB</code> 是主流储存引擎并支持行级锁的，有更高的并发处理性能。</p><ul><li>行锁开销大，锁表慢</li><li>行锁高并发下可并行处理，性能更高</li><li>行锁是针对索引加的锁，在通过索引检索时才会应用行锁，否则使用表锁</li><li>在事务执行过程中，随时都可以执行锁定，锁在执行 COMMIT或者ROLLBACK的时候释放</li></ul><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><ul><li><p>使用<strong>索引字段</strong>为筛选条件，来复现行锁。</p><p>事务A执行以下sql 但不提交，此时已经将id=1这条记录给加锁了。</p><pre><code class="hljs mysql">-- 事务ABEGIN;UPDATE stu SET sname &#x3D; &#39;hdcms&#39; WHERE id&#x3D;1;</code></pre><p>事务B也执行对id=1进行相同的更新操作，执行过程出现阻塞。如果事务执行对id=2，则可以操作成功，不会出现阻塞现象。</p><pre><code class="hljs mysql">-- 事务B 阻塞BEGIN;UPDATE stu SET sname &#x3D; &#39;hdcms2&#39; WHERE id&#x3D;1;commit-- 事务B id&#x3D;2 操作成功BEGIN;UPDATE stu SET sname &#x3D; &#39;hdcms2&#39; WHERE id&#x3D;2;commit</code></pre><p>当事务A提交之后，解锁id=1这行记录之后，事务B的操作才会继续执行</p><pre><code class="hljs mysql">-- 事务Acommit</code></pre></li><li><p>使用<strong>非索引字段</strong>为筛选条件，则出现表锁。如果出现表锁，则该张表的update操作将无法操作。</p><p>事务A执行以下代码，因为<code>sname</code>字段没有添加索引，造成锁定整个表</p><pre><code class="hljs mysql">-- 事务A 没有commit，同时sname 字段没有添加索引BEGIN;UPDATE stu SET sname &#x3D; &#39;hdcms&#39; WHERE sname &#x3D;&#39;haha1&#39;;</code></pre><p>现在事务B更新任何一条记录都会造成阻塞，因为现在是表锁状态</p><pre><code class="hljs mysql">-- 事务B 阻塞，因为stu 表锁BEGIN;update stu set sname &#x3D; &#39;小明&#39; where id&#x3D;1commit</code></pre></li><li><p>简单查看MySQL行锁的争用情况</p><p>过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况</p><pre><code class="hljs mysql">show status like &#39;innodb_row_lock%&#39;;</code></pre><p>如果发现争用比较严重，如Innodb_row_lock_waits和Innodb_row_lock_time_avg的值比较高，还可以通过设置InnoDB Monitors来进一步观察发生锁冲突的表、数据行等，并分析锁争用的原因。</p></li></ul><h4 id="区间锁（页面锁）"><a href="#区间锁（页面锁）" class="headerlink" title="区间锁（页面锁）"></a>区间锁（页面锁）</h4><ul><li><p>使用索引字段作为筛选条件</p><p>事务A筛选时使用了范围区间</p><pre><code class="hljs mysql">-- 事务A 没有commit，造成范围锁id为2 和 3的行被锁住BEGIN;UPDATE goods SET num&#x3D;200 WHERE id&gt;1 AND id&lt;4;</code></pre><p>事务B将不能修改表中的ID等于2的记录，但可以修改大于等于4 或者等于1的记录</p><pre><code class="hljs mysql">-- 事务B id&#x3D;2 无法操作，区间锁BEGIN;update goods set num &#x3D;1 where id&#x3D;2;commit;-- 事务B id &#x3D;4 正常操作BEGIN;update goods set num &#x3D;1 where id&#x3D;4;commit;</code></pre></li></ul><h4 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h4><p>MySQL表级锁定的常见类型主要分为两种，一种是读锁，一种是写锁。</p><h5 id="读锁"><a href="#读锁" class="headerlink" title="读锁"></a>读锁</h5><p>为表设置读锁后，当前会话和其他会话都不可以修改数据。</p><p>会话A对表goods设置了读锁，将不能修改该表，也不能操作其他表</p><pre><code class="hljs mysql">LOCK TABLE goods READ;-- 加读锁UPDATE goods SET num&#x3D;300 WHERE id&#x3D;1;SELECT * FROM stu;</code></pre><p>因为会话A对表<code>goods</code>设置了读锁，所以会话B也不能修改</p><pre><code class="hljs mysql">update goods set num&#x3D;200 where id&#x3D;1;-- 阻塞住</code></pre><p>会话A解锁表后，其他会话又可以继续操作表了</p><pre><code class="hljs mysql">UNLOCK TABLES;</code></pre><h5 id="写锁"><a href="#写锁" class="headerlink" title="写锁"></a>写锁</h5><p>为表设置了写锁后，当前会话可以修改，查询表，其他会话将无法操作。</p><p>会话A对表goods设置写锁，本会话可以正常操作表， 并不能操作其他表</p><pre><code class="hljs mysql">LOCK TABLE goods WRITE; -- 加写锁INSERT INTO goods (name,num )VALUES(&#39;后盾人教程&#39;,300);</code></pre><p>会话B读取/写入/写入表数据都将阻塞</p><pre><code class="hljs mysql">select * from goods;-- 阻塞</code></pre><p>会话A解锁表数据后，其他会话都可以正常操作了</p><pre><code class="hljs mysql">UNLOCK TABLES;</code></pre><h5 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h5><p>悲观锁指对数据被外界修改持保守态度，在整个数据处理过程中，将数据处于锁定状态，可以很好地解决并发事务的更新丢失问题。</p><p>事务A执行悲观锁操作后，其他事务执行将被阻塞</p><pre><code class="hljs mysql">-- 没有commit, for update 表示执行悲观锁BEGIN;SELECT * FROM goods WHERE id&#x3D;1 FOR UPDATE;UPDATE goods SET num&#x3D;num-2 WHERE id&#x3D;1;</code></pre><p>事务B执行以下代码将不能查询库存，必须等事务A提交或回滚事务</p><pre><code class="hljs mysql">-- 被阻塞，只要等事务A commit之后才会执行B事务BEGIN;SELECT * FROM goods WHERE id&#x3D;1 FOR UPDATE;commit；</code></pre><h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><p>在每次去拿数据的时候认为别人不会修改，不对数据上锁，但是在提交更新的时候会判断在此期间数据是否被更改，如果被更改则提交失败。</p><p>事务A查询商品库存，获取了商品记录，记录中有VERSION字段用于记录版本号（目前为0）</p><pre><code class="hljs mysql">BEGIN;SELECT * FROM goods WHERE id &#x3D; 1;</code></pre><p>事务B同时查询，也获取了版本号为0的记录</p><pre><code class="hljs mysql">BEGIN;SELECT * FROM goods WHERE id &#x3D; 1;</code></pre><p>事务A更改库存，并增加版本号</p><pre><code class="hljs mysql">UPDATE goods SET num&#x3D;num-10,VERSION &#x3D;VERSION+1 WHERE VERSION&#x3D;0;</code></pre><p>事务B更改数据，但使用的是事务B查询到的0号版本，因为事务A已经提交版本号为1，造成事务B修改失败，保证了数据的完整性。</p><pre><code class="hljs mysql">UPDATE goods SET num&#x3D;num-10,VERSION &#x3D;VERSION+1 WHERE VERSION&#x3D;0;</code></pre><p><a href="https://blog.csdn.net/Jack__Frost/article/details/73347688">超详细的锁介绍</a></p><p>在对数据进行insert\update\delete的时候容易出现Deadlock found when trying to get lock 错误，目前有两个方式进行调整优化。</p><ol><li>优化sql语句</li><li>降低MySQL数据的事务隔离级别</li></ol><p>参考链接：<a href="https://www.cnblogs.com/qq1148932219/p/11694064.html">https://www.cnblogs.com/qq1148932219/p/11694064.html</a></p>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL系列二之基础使用</title>
    <link href="/2018/08/15/008_MySQL%E7%B3%BB%E5%88%97%E4%BA%8C/"/>
    <url>/2018/08/15/008_MySQL%E7%B3%BB%E5%88%97%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p>这个是MySQL系列的第二部分还是主要以基础使用为主，本篇主要介绍排序和多表操作相关的基础知识。所有讲解都是基于MySQL 8.0以上版本。</p><h3 id="摘要和排序"><a href="#摘要和排序" class="headerlink" title="摘要和排序"></a>摘要和排序</h3><p><strong>order by</strong></p><p>mysql 排序的关键字为<strong>order by</strong>，默认排序是升序（ASC），降序的关键字是DESC，有一点需要留意的是，如果有SQL语句中有where子句，则order by 必须放在where 语句后面。多个条件排序则用逗号隔开。</p><pre><code class="hljs mysql">-- 默认学生表，字段有id,class_id,name,birthday,sex-- 根据姓名进行降序排列select * from stu order by name desc;-- 必须放在where语句后面select * from stu where id &gt;&#x3D;2 order by name;-- 多条件排序select * from stu order by sex asc,birthday desc;</code></pre><p>上面为通用的排序方式，MySQL同时也支持自定义排序通过**filed()**函数，field(value,str1,str2)，value与str1、str2比较，返回1、2，如遇到null或者不在列表中的数据则返回0，当然后面也可以增加更多的str3，str4。</p><pre><code class="hljs mysql">-- 根据姓自定义排序SELECT * FROM stu ORDER BY FIELD(left(sname,1),&#39;何&#39;,&#39;赵&#39;);</code></pre><p><strong>count函数</strong></p><p>count(字段) 函数不会统计null值，使用count(*)时会将null统计进去。</p><pre><code class="hljs mysql">-- 统计class_id 字段不为null 的条数SELECT COUNT(class_id) FROM stu;-- 和上面语句等价select count(*) from stu where class_id is not null;</code></pre><p><strong>min/max 函数</strong></p><p>计算最小值或最大值</p><pre><code class="hljs mysql">-- 获取最小的学生出生年份SELECT year(max(birthday)) from stu;</code></pre><p><strong>SUM/AVG</strong>函数</p><p>统计和，统计平局值</p><pre><code class="hljs mysql">-- 统计学生的平均年龄SELECT ROUND(AVG(TIMESTAMPDIFF(YEAR,birthday,now())))  FROM stu ;</code></pre><p><strong>distinct 函数</strong></p><p>distinct用于去除结果集中的重复记录</p><pre><code class="hljs mysql">-- 获取所有班级编号SELECT DISTINCT class_id AS class FROM stu WHERE class_id IS NOT NULL;</code></pre><p><strong>group by</strong></p><p>在说group by 之前，我们先了解一下MySQL 的查询模式，mysql可以运行在不同<strong>sql mode</strong>模式下面，sql mode模式定义了mysql应该支持的sql语法，数据校验等！</p><pre><code class="hljs mysql">-- 查看全局的sql_modeSELECT @@GLOBAL.sql_mode;-- 设置全局的sql_modeSET GLOBAL sql_mode &#x3D; &#39;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#39;;</code></pre><p>不同的sql_mode</p><table><thead><tr><th>sql_mode</th><th>说明</th></tr></thead><tbody><tr><td>ONLY_FULL_GROUP_BY</td><td>对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中</td></tr><tr><td>STRICT_TRANS_TABLES</td><td>在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做限制</td></tr><tr><td>NO_ZERO_IN_DATE</td><td>在严格模式下，不允许日期和月份为零</td></tr><tr><td>NO_ZERO_DATE</td><td>设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告。</td></tr><tr><td>ERROR_FOR_DIVISION_BY_ZERO</td><td>在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。如 果未给出该模式，那么数据被零除时MySQL返回NULL</td></tr><tr><td>NO_ENGINE_SUBSTITUTION</td><td>如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</td></tr><tr><td>NO_AUTO_VALUE_ON_ZERO</td><td>该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户 希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。</td></tr></tbody></table><pre><code class="hljs mysql">-- 去除本次链接的sql_mode，ONLY_FULL_GROUP_BYSET sql_mode&#x3D;(SELECT REPLACE(@@sql_mode,&#39;ONLY_FULL_GROUP_BY&#39;,&#39;&#39;));-- 根据班级分组查询最小出生日期姓名SELECT min(birthday),sname FROM stu GROUP BY class_id;</code></pre><p>使用GROUP BY将数据分组后，还可以使用HAVING过滤分组，规定包括哪些分组，排除哪些分组</p><pre><code class="hljs mysql">SELECT class_id FROM stu GROUP BY class_id HAVING count(*)&gt;2;</code></pre><h3 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h3><p>在实际操作中很多时候是一张表不能解决，我们需要从多张表中获取数据，或者通过其他表的数据删除另外一张表的数据，这个时候就需要多表操作了。表的关系可以分为一对一，一对多，多对多。</p><p>先看下图，一下所有的inner可以通过该图来理解。</p><p><img src="/images/mysql/join.jpg"></p><p><strong>INNER</strong></p><p>所有多表操作都可以简单理解为，把多个表联系成一个表，最终思想成面上当成一个表对待。使用<strong>inner join</strong> 后面跟着ON，ON后面跟的是条件</p><pre><code class="hljs mysql">-- 获取用户信息select * from stu as s,user_info as i where s.id &#x3D; i.stu_id;-- 使用inner 来进行多表查询，和上面的语句是等价的SELECT * FROM stu AS s INNER JOIN user_info as i ON s.id &#x3D; i.stu_id;</code></pre><p><strong>OUTER JOIN</strong></p><p>外链接包括<code>LEFT JOIN</code> 与 <code>RIGHT JOIN</code> ，可以简单理解为 <code>LEFT JOIN</code>会包含左侧所有表记录，<code>RIGHT JOIN</code> 会包含右侧表全部记录。</p><p>左连接LEFT JOIN的含义就是求两个表的交集外加左表剩下的数据。依旧从笛卡尔积的角度讲，就是先从笛卡尔积中挑出ON子句条件成立的记录，然后加上左表中剩余的记录。</p><pre><code class="hljs mysql">-- 获取没有设置QQ的用户SELECT s.sname FROM stu AS s LEFT JOIN user_info as iON s.id &#x3D; i.stu_idWHERE i.qq is null;</code></pre><p>同理右连接RIGHT JOIN就是求两个表的交集外加右表剩下的数据。再次从笛卡尔积的角度描述，右连接就是从笛卡尔积中挑出ON子句条件成立的记录，然后加上右表中剩余的记录。和left join 是相反的。</p><pre><code class="hljs mysql">-- 哪个班级没有学生SELECT sname,c.id,c.cname FROM stu AS s RIGHT JOIN class as cON s.class_id &#x3D; c.idWHERE s.id IS NULL;</code></pre><p><strong>SELF JOIN</strong></p><p><code>SELF JOIN</code>为自连接即表与自身进行关联。虽然自连接的两张表都是同一张表，但也把它按两张表对待，这样理解就会容易些。子查询操作和自连接操作都能达到相同的查询结果，但是<strong>子查询操作的是两次性能会比自连接消耗性能</strong>。</p><pre><code class="hljs mysql">-- 使用子查询操作SELECT * FROM stu WHERE class_id &#x3D; (SELECT class_id FROM stu WHERE sname &#x3D; &#39;后盾人&#39;)AND stu.sname !&#x3D;&#39;后盾人&#39;;-- 使用自连接操作SELECT s1.sname,s2.sname FROM stu as s1 INNER JOIN stu as s2ON s1.class_id &#x3D; s2.class_idWHERE s1.sname &#x3D; &#39;后盾人&#39; AND s2.sname !&#x3D;&#39;后盾人&#39;;</code></pre><p><strong>UNION</strong></p><p><code>UNION</code> 用于连接多个查询结果，要保证每个查询返回的列数与顺序要一样。</p><ul><li>UNION会过滤重复的结果</li><li>UNION ALL 不过滤重复结果</li><li>列表字段由是第一个查询的字段</li></ul><pre><code class="hljs mysql">-- 查询年龄最大与最小的同学(SELECT sname,birthday FROM stu ORDER BY birthday DESC LIMIT 1)UNION(SELECT sname,birthday from stu ORDER BY birthday ASC LIMIT 1)ORDER BY birthday DESC;</code></pre><p>本文参考链接[后盾人MySQL教程]([<a href="http://houdunren.gitee.io/note/mysql/2%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html]">http://houdunren.gitee.io/note/mysql/2%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html]</a>(<a href="http://houdunren.gitee.io/note/mysql/2">http://houdunren.gitee.io/note/mysql/2</a> 基本操作.html))</p>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL系列一之基础使用</title>
    <link href="/2018/08/12/007_MySQL%E7%B3%BB%E5%88%97%E4%B8%80/"/>
    <url>/2018/08/12/007_MySQL%E7%B3%BB%E5%88%97%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>MySQL是平常使用较多的数据，因项目需要发现自身对MySQL有所欠缺。所以复习了一下MySQL知识，做个总结归纳。本文介绍为基础知识，从数据库链接开始，包括一些常用SQL语句，和MySQL的一些数据类型。建议使用docker 的MySQL 进行SQL练习。同时推荐个人比较喜欢使用的数据库可视化软件Table Plus。</p><h3 id="链接MySQL服务"><a href="#链接MySQL服务" class="headerlink" title="链接MySQL服务"></a>链接MySQL服务</h3><p>通过命令行建立链接</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> -u 参数指定用户名，-p指定密码，-P指定端口默认是3306，-h 是指定主机地址,-e 指定链接之后操作</span>mysql -uroot -proot -P3306 -h 127.0.0.1mysql -uroot -proot -e&quot;show databases&quot; <span class="hljs-meta">#</span><span class="bash"> 建立链接的同时，执行提前写好的sql文件</span>mysql -uroot -proot &lt; test.sql</code></pre><h3 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h3><p>数据库管理包括，数据库创建，数据库删除，数据库使用等操作</p><pre><code class="hljs mysql">-- 创建数据库并指定字符集create database test charset utf8;-- 数据库查看show databases;-- 删除数据库drop database test;-- 一般为了删除不存在的数据库报错，可以通过if exitsdrop database if exits test;-- 使用数据库use test;</code></pre><h3 id="数据表管理"><a href="#数据表管理" class="headerlink" title="数据表管理"></a>数据表管理</h3><p>数据表管理包括，数据表创建，数据表删除，数据表记录增删改，数据表字段名修改</p><pre><code class="hljs mysql">-- 创建class 表id 自增，同时指定表字符集create table class (id int primary key AUTO_INCREMENT,cname varchar(30) NOT NULL,description varchar(100) default NULL) charset utf8;-- 数据表插入单条数据，和多条数据INSERT INTO class set cname &#x3D;&#39;golang&#39;,description&#x3D;&#39;开发语言&#39;;INSERT INTO class (cname,description) VALUES(&#39;PHP&#39;,&#39;开发语言&#39;),(&#39;Mysql&#39;,&#39;数据库&#39;);-- 数据表删除单条记录delete from class where cname&#x3D;&#39;golang&#39;;-- 数据表修改单条记录update class set cname &#x3D; &quot;PHP2&quot; where id&#x3D;2;-- 删除表drop table if exits class;</code></pre><p>创建数据模板表，后续可以根据模板表创建新的数据表</p><pre><code class="hljs mysql">-- 复制表结构create table tcopy like class;-- 复制表同时复制数据create table tcopy select * from class;</code></pre><p>数据表字段名称修改以及字段增删</p><pre><code class="hljs mysql">-- 数据表重命名alter table class rename classes;rename table classes to class;-- 数据表增加字段alter table class add school varchar(50);-- 数据表删除字段alter table class drop school;-- 修改字段名alter table class CHANGE description descriptions varchar(30);</code></pre><p>数据表相关主键操作，主键的增删</p><pre><code class="hljs mysql">-- 主键为自增字段，需要删除自增属性后才可以删除主键alter table class MODIFY id int not null;-- 删除自增alter table class DROP PRIMARY key;-- 删除主键-- 添加表主键alter table class add PRIMARY KEY(id);-- 添加表主键alter table class MODIFY id int not null AUTO_INCREMENT;-- 添加自增列alter table class modify id int not null AUTO_INCREMENT ,add PRIMARY key(id);</code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>MySQL数据类型包括字符串，数值类型，枚举类型</p><p><strong>字符串数据类型</strong></p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255字节</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 字节</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255字节</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255字节</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535字节</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535字节</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215字节</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215字节</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295字节</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295字节</td><td align="left">极大文本数据</td></tr></tbody></table><p>CHAR类型是定长的数据类型，比如定义20长度的<code>char</code>类型即使只存一个字符，也占20个长度，好处是处理速度快，缺点是占用空间大。</p><p>VARCHAR类型是变长数据类型，空间受内容长度影响。</p><p><strong>字符串常用函数</strong></p><table><thead><tr><th>函数名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>UPPER()/LOWER()</td><td>将内容全部改成大写/小写</td><td>select UPPER(cname) from class;</td></tr><tr><td>CONCAT()</td><td>字符拼接</td><td>select concat(cname,description) from class;</td></tr><tr><td>Left()/Right()</td><td>用于取左或右指定数量的字符</td><td>select left(cname,3) from class;</td></tr><tr><td>mid</td><td>从中间取字符串</td><td>select *  from class where mid(cname,2,2) = ‘hp’;</td></tr><tr><td>substring</td><td>从指定位置开始向右截取字符串</td><td>select *  from class where SUBSTRING(cname,2) = ‘hp’;</td></tr><tr><td>char_length</td><td>获取字符串数量</td><td>select char_length(cname) from class;</td></tr></tbody></table><p>正则表达式和like的使用</p><pre><code class="hljs mysql">-- 正则匹配php 或者MySQLSELECT * FROM class WHERE cname REGEXP &#39;php|mysql&#39;;-- _用于匹配一个字符，%用于匹配任意多个字符SELECT *  FROM class WHERE cname LIKE &#39;_h%&#39;;</code></pre><p><strong>数值整型类型</strong></p><table><thead><tr><th>MySQL数据类型</th><th>含义（有符号）</th></tr></thead><tbody><tr><td>tinyint(m)</td><td>1个字节 范围(-128~127)</td></tr><tr><td>smallint(m)</td><td>2个字节 范围(-32768~32767)</td></tr><tr><td>mediumint(m)</td><td>3个字节 范围(-8388608~8388607)</td></tr><tr><td>int(m)</td><td>4个字节 范围(-2147483648~2147483647)</td></tr><tr><td>bigint(m)</td><td>8个字节 范围(+-9.22*10的18次方)</td></tr></tbody></table><p>取值范围如果加了unsigned，则最大值翻倍，如tinyint unsigned的取值范围为(0~256)。</p><p><strong>数值浮点型</strong></p><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th></tr></thead><tbody><tr><td align="left">FLOAT</td><td align="left">4 字节</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 字节</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td></tr><tr><td align="left">DECIMAL</td><td align="left">DECIMAL(M,D) ，m&lt;65 是总个数，d&lt;30</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td></tr></tbody></table><p><strong>ENUM/SET</strong></p><p>ENUM 类型因为只允许在集合中取得一个值，有点类似于单选项。</p><p>SET 类型与 ENUM 类型相似但不相同。SET 类型可以从预定义的集合中取得任意数量的值。　一个 SET 类型最多可以包含 64 项元素。</p><h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><table><thead><tr><th>日期时间类型</th><th>占用空间</th><th>日期格式</th><th>最小值</th><th>最大值</th><th>零值表示</th></tr></thead><tbody><tr><td>DATETIME</td><td>8 bytes</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td><td>0000-00-00 00:00:00</td></tr><tr><td>TIMESTAMP</td><td>4 bytes</td><td>YYYY-MM-DD HH:MM:SS</td><td>1970-01-01 08:00:01</td><td>2038-01-19 03:14:07</td><td>00000000000000</td></tr><tr><td>DATE</td><td>4 bytes</td><td>YYYY-MM-DD</td><td>1000-01-01</td><td>9999-12-31</td><td>0000-00-00</td></tr><tr><td>TIME</td><td>3 bytes</td><td>HH:MM:SS</td><td>-838:59:59</td><td>838:59:59</td><td>00:00:00</td></tr><tr><td>YEAR</td><td>1 bytes</td><td>YYYY</td><td>1901</td><td>2155</td><td>0000</td></tr></tbody></table><p>Mysql保存日期格式使用 YYYY-MM-DD HH:MM:SS的ISO 8601标准,</p><p>创建字段</p><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">ADD</span> create_at datetime <span class="hljs-keyword">default</span> <span class="hljs-literal">null</span>;</code></pre><p>对于时间有一些数据格式化表示，通常有一些格式化参数，常用的格式化参数如下：更多的查询官方文档</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>%Y</td><td>年，4 位</td></tr><tr><td>%y</td><td>年，2位</td></tr><tr><td>%M</td><td>月名</td></tr><tr><td>%m</td><td>月，数值(00-12)</td></tr><tr><td>%H</td><td>小时 (00-23)</td></tr><tr><td>%h</td><td>小时 (01-12)</td></tr><tr><td>%i</td><td>分钟，数值(00-59)</td></tr><tr><td>%s</td><td>秒(00-59)</td></tr><tr><td>%r</td><td>时间，12-小时（hh:mm:ss AM 或 PM）</td></tr></tbody></table><p>使用示例</p><pre><code class="hljs mysql">select cname,DATE_FORMAT(create_at,&#39;%Y年%m月%d %H时%i分%s秒&#39;) as create_at from class;select cname,TIME_FORMAT(create_at,&#39;%r&#39;) as create_at from class;</code></pre><p><strong>添加数据时自动更新时间</strong></p><pre><code class="hljs mysql">alter table class add updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;</code></pre><p>只要该条记录有任何一个字段被修改，则自动更新update_at字段的值</p><p><strong>常用函数</strong></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>HOUR</td><td>小时</td></tr><tr><td>MINUTE</td><td>分</td></tr><tr><td>SECOND</td><td>秒</td></tr><tr><td>YEAR</td><td>年</td></tr><tr><td>MONTH</td><td>月</td></tr><tr><td>DAY</td><td>日</td></tr><tr><td>TIME</td><td>获取时间</td></tr><tr><td>WEEK</td><td>周</td></tr><tr><td>QUARTER</td><td>季</td></tr><tr><td>CURRENT_DATE（CURDATE）</td><td>当前日期</td></tr><tr><td>CURRENT_TIME</td><td>当前时间</td></tr><tr><td>NOW</td><td>当前时间</td></tr><tr><td>DAYOFYEAR</td><td>一年中的日数</td></tr><tr><td>DAYOFMONTH</td><td>月份中日数</td></tr><tr><td>DAYOFWEEK</td><td>星期天（1）到星期六（7）</td></tr><tr><td>WEEKDAY</td><td>星期一（0）到星期天（6）</td></tr><tr><td>TO_DAYS</td><td>从元年到现在的天数（忽略时间部分）</td></tr><tr><td>FROM_DAYS</td><td>根据天数得到日期（忽略时间部分）</td></tr><tr><td>TIME_TO_SEC</td><td>时间转为秒数（忽略日期部分）</td></tr><tr><td>SEC_TO_TIME</td><td>根据秒数转为时间（忽略日期部分）</td></tr><tr><td>UNIX_TIMESTAMP</td><td>根据日期返回秒数（包括日期与时间）</td></tr><tr><td>FROM_UNIXTIME</td><td>根据秒数返回日期与时间（包括日期与时间）</td></tr><tr><td>DATEDIFF</td><td>两个日期相差的天数（忽略时间部分）</td></tr><tr><td>TIMEDIFF</td><td>计算两个时间的间隔（忽略日期部分）</td></tr><tr><td>TIMESTAMPDIFF</td><td>根据指定单位计算两个日期时间的间隔（包括日期与时间）</td></tr><tr><td>LAST_DAY</td><td>该月的最后一天</td></tr></tbody></table><p>使用示例</p><pre><code class="hljs mysql">-- 使用函数分割时间select cname,YEAR(create_at),MONTH(create_at),DAY(create_at),HOUR(create_at),MINUTE(create_at),SECOND(create_at) from class;-- 当前时间SELECT now(),CURDATE(),CURRENT_DATE(),CURRENT_TIME(),NOW();-- 时间计算SELECT DAYOFYEAR(now()),DAYOFMONTH(now()),DAYOFWEEK(now()),WEEKDAY(now());</code></pre><p>**时间计算 常用函数 **</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ADDTIME</td><td>添加时间（负数为减少），只对时间有效</td></tr><tr><td>TIMESTAMP</td><td>添加时间（负数为减少），只对时间有效</td></tr><tr><td>DATE_ADD</td><td>根据单位添加时间，支持单位有YEAR/MONTH/DAY/HOUR/MINUTE/SECOND/HOUR_MINUTE（负数时等于DATE_SUB)</td></tr><tr><td>DATE_SUB</td><td>DATE_ADD的反函数</td></tr><tr><td>LAST_DAY</td><td>指定月最后一天日期</td></tr></tbody></table><p>使用示例</p><pre><code class="hljs mysql">-- 获取七小时之前的时间select ADDTIME(now(),&#39;-7:00:00&#39;)-- 获取七天之后的时间，interval表示间隔SELECT DATE_ADD(now(),INTERVAL 7 DAY);-- 获取本月第一天的日期SELECT DATE_SUB(now(),INTERVAL DAYOFMONTH(now())-1 DAY);</code></pre><p>本文参考链接[后盾人MySQL教程]([<a href="http://houdunren.gitee.io/note/mysql/2%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html]">http://houdunren.gitee.io/note/mysql/2%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.html]</a>(<a href="http://houdunren.gitee.io/note/mysql/2">http://houdunren.gitee.io/note/mysql/2</a> 基本操作.html))</p>]]></content>
    
    
    <categories>
      
      <category>DB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>加密算法简介</title>
    <link href="/2017/08/28/006_%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <url>/2017/08/28/006_%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>先用一张图从大方向来介绍加密分类。当然更加详细的加密算法需要更深入的去学习，本篇主要是对加密算法有个大概的认知，能够认识到不同加密算法的优劣。</p><pre><code class="hljs mermaid">graph TBA(加密) --&gt;B(可逆)A(加密) --&gt;C(不可逆)C --&gt;D(对称加密)C --&gt;E(非对称加密)</code></pre><h3 id="不可逆的加密算法"><a href="#不可逆的加密算法" class="headerlink" title="不可逆的加密算法"></a>不可逆的加密算法</h3><h4 id="单向加密"><a href="#单向加密" class="headerlink" title="单向加密"></a>单向加密</h4><p>通过名称我们就可以了解到，就是明文经过加密之后，<code>无法通过解密</code>手段解析出加密之前到明文。既然无法解密得出明文，那该加密算法有什么应用场景呢？</p><p>不能逆加密算法的应用场景主要是防止信息被篡改，可以明确消息在传递过程中没有被第三方篡改。典型的不可逆加密算法有MD5、SHA、HMAC、SM3等</p><h5 id="不可逆特点"><a href="#不可逆特点" class="headerlink" title="不可逆特点"></a>不可逆特点</h5><ol><li>压缩性：任意长度明文信息经过加密之后得到长度都是固定的。</li><li>抗修改性：对原数据进行任何改动，哪怕是修改一个字节，得到结果都有很大的区别。</li><li>弱抗碰撞性：已知原数据和其单向加密结果，想找到一个具有相同结果的数据（即伪造数据）是非常困难的。</li><li>强抗碰撞性：想找到两个不同的数据，使它们具有相同的单向加密结果，是非常困难的。</li><li>简单高效：对数据进行单向加密处理速度是很快的。</li></ol><p>特点整理自<a href="https://zhuanlan.zhihu.com/p/22670078">移动端加解密总结</a></p><h3 id="可逆的加密算法"><a href="#可逆的加密算法" class="headerlink" title="可逆的加密算法"></a>可逆的加密算法</h3><p>可逆的加密算法就是明文经过加密之后，<code>可以通过解密</code>手段解析出加密之前得到明文。可逆的加密算法又分为对称加密和非对称加密。</p><h4 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h4><p>对称加密算法，就是加密和解密使用的是同一个<code>密钥</code>。这个密钥既可以加密也用于解密，因而其安全性依赖于所持有密钥的安全性。</p><p>常用的对称加密算法DES、AES、3DES、SM4</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ol><li>密钥较小：密钥越大，加密越强，但是加解密的速度越慢。</li><li>优点：算法公开、计算量小、加密速度快、加密效率高，适合大的数据加密</li><li>缺点：密钥的管理分配。在发送密钥的过程中，密钥会有很大的风险被拦截。</li></ol><h5 id="加密模式"><a href="#加密模式" class="headerlink" title="加密模式"></a>加密模式</h5><p>对称加密算法还有一个需要留意的就是加密模式，即使使用的相同加密算法，加解密使用不同的加密模式也是无法获得正确的加密结果。主要了解下，ECB(电码本模式)、CCB(密码分组链接模式)模式。其他模式这里就详细介绍了，可以参考<a href="https://zhuanlan.zhihu.com/p/131324301">AES加密模式</a>。</p><h6 id="ECB-电码本模式"><a href="#ECB-电码本模式" class="headerlink" title="ECB(电码本模式)"></a>ECB(电码本模式)</h6><p>这种模式将整个明文分成若干段相同的小段，然后对每一个小段进行加密。不同对称加密算法的段长度不同。</p><p>对于AES加密算法来说这个小段的长度为128bit。这里就出现另外一个问题就是如果明文的长度不是128bit的倍数，就需要填充到128bit的倍数。就需要[填充模式](##### 填充模式)</p><p>ECB模式存在一个明显的问题，如果使用相同的密钥，那么相同的明文块就会生成相同的密文块，不能很好的隐藏数据模式。比如相同json结构，使用相同的密钥加密，能够推出加密模式为ECB模式。这听起来没什么大事，但事实上这对数据安全是一个很大的威胁。因此，<code>在密码协议中不建议使用ECB模式</code></p><p><img src="https://cocoon-break.github.io/images/other/006_encrypt_1.jpg" alt="img"></p><h6 id="CCB-密码分组链接模式"><a href="#CCB-密码分组链接模式" class="headerlink" title="CCB(密码分组链接模式)"></a>CCB(密码分组链接模式)</h6><p>这种模式是先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密。</p><p>那这里也有新的问题产生了，如果使用这种模式，第一段的明文块怎么加密？</p><p>这里就产生了一个概念<strong>初始化向量IV</strong>，初始化向量IV的作用是先与第一个明文块进行异或，得到第一个明文块，然后再进行后续的加密。</p><p>CCB模式也存在一个明显的问题，加密过程是串行的，不能并行，速度比较慢。但是解密可以并行。另外，如果密文的某一位被修改了，只会使这个密文块所对应的明文块完全改变并且改变下一个明文块的对应位，安全性仍然有一定的欠缺。</p><h5 id="填充模式"><a href="#填充模式" class="headerlink" title="填充模式"></a>填充模式</h5><ol><li>NoPadding，这个很好理解就是不填充。但是有一个要求是，明文长度必须是<code>加密算法分段之后长度</code>的倍数。比如AES就是128bit</li><li>PKCS7Padding，假设数据长度需要填充n(n&gt;0)个字节才对齐，那么填充n个字节，每个字节都是n;如果数据本身就已经对齐了，则填充一块长度为块大小的数据，每个字节都是块大小。（AES常用）</li><li>PKCS5Padding，PKCS7Padding的子集，块大小固定为8字节。</li><li>zeropadding，数据长度不对齐时使用0填充，否则不填充。</li><li>ISO 10126，最后一个字节是填充的字节数（包括最后一字节），其他全部填随机数</li><li>ANSI X9.23，跟ISO 10126很像，只不过ANSI X9.23其他字节填的都是0而不是随机数</li></ol><p><strong>注：</strong></p><ol><li>初始化向量IV，除ECB以外的所有加密方式中，都需要用到IV对加密结果进行随机化。</li><li>除OFB和CTR不需要填充！其他的加密模式都是需要填充的</li></ol><h4 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h4><p>非对称加密算法，就是加密和解密使用的不是相同的密钥。一个可以公开的密钥叫<code>公钥</code>，主要用来加密使用。一个需要私密保存的的密钥叫<code>私钥</code>。需要注意的是，公钥和私钥必须是一对，如果用公钥加密，必须使用对应的私钥才能解密。</p><p>常用的非对称加密算法RSA、SM2</p><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ol><li>算法强度复杂、安全性依赖于算法与密钥但是由于其算法复杂，而使得加密解密速度没有对称加密解密的速度快。</li><li>优点：密钥管理。使用公私钥，私钥只能安全的一方保管，公钥可以提供给任何人。公钥加密的消息只能私钥能解</li><li>缺点：效率低下</li></ol><p>浅显易懂的小灰漫画<a href="https://zhuanlan.zhihu.com/p/55574439">什么是加密算法</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>扩展</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssh 免密登录</title>
    <link href="/2017/07/05/001_ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    <url>/2017/07/05/001_ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p> 做后端开发经常遇到一个情况是使用公司的虚拟机很多，每次都要记住用户名密码和IP是一件很麻烦的事情，所以在想有没有一种能够免密快速ssh的方式？</p><h3 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH"></a>什么是SSH</h3><p>简单来说SSH 是一种网络协议，用于计算机之间的加密登录，早起的互联网通信都是明文通信的，一旦被截获密码就泄露出去了。于是就有了SSH协议，将登录信息全部加密。目前SSH协议已经在全世界广泛使用了，且成为各个L inux发行版本的标配。（桌面版本的Linux不支持SSH，需要安装OpenSSH）</p><h3 id="SSH的过程"><a href="#SSH的过程" class="headerlink" title="SSH的过程"></a>SSH的过程</h3><p>SSH 默认使用的是RSA加密算法</p><ol><li>请求主机Client用户使用<code>ssh user@host</code>命令对远程Server发起登录</li><li>远程主机将自己的公钥返回给请求主机</li><li>请求主机使用公钥对用户输入的密码进行加密</li><li>请求主机将加密后的信息发送给远程主机</li><li>远程主机使用私钥对密码进行解密</li><li>最后，远程主机判断解密后的密码是否与用户密码一致，一致就同意登陆，否则反之</li></ol><pre><code class="hljs mermaid">sequenceDiagram    autonumber    Client-&gt;&gt;Server: ssh user@host    Server-&gt;&gt;Client: return public_key    Client-&gt;&gt;Client: use public_key encrypt password    Client-&gt;&gt;Server: send encrypted password    Server-&gt;&gt;Server: use private_key decrypt password    Server-&gt;&gt;Server: check password</code></pre><p>整个过程看上去没啥问题，但是相比HTTPS 协议安全性是稍差的，那是因为SSH协议没用CA证书签发机构，很容利用自签的证书来截获请求冒充远程主机来取得登录密码的。SSH发现这个问题之后，想了一个办法来绕开这个问题。引入了know_hosts。</p><h3 id="know-hosts作用"><a href="#know-hosts作用" class="headerlink" title="know_hosts作用"></a>know_hosts作用</h3><p>在第一次ssh的时候我们都会看到这样的一个提示</p><pre><code class="hljs shell">The authenticity of host &#x27;10.122.48.130 (10.122.48.130)&#x27; can&#x27;t be established.RSA key fingerprint is ee:6e:68:7d:91:8c:d8:d9:1d:ab:61:9b:5f:53:68:d3.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added &#x27;10.122.48.130&#x27; (RSA) to the list of known hosts.</code></pre><p>这句话提示的是：无法确认主机的真实性，只知道它的公钥指纹，是否建立连接？这个方式就将主机被冒充的风险抛给了使用者。当然对公钥的核对也是一个问题，这就需要远程主机公开公钥。在上面的提示中输入<code>yes</code>之后，s sh就会将远程主机的公钥写入本地的know_hosts文件中。第二次ssh的时候就会核对这个公钥指纹，如果不一致则无法ssh 成功。</p><p>具体的know_hosts内容样例，IP 加密算法 指纹信息</p><pre><code class="hljs shell">10.122.48.130 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6G4lMkyH4O2IcWxRmbecn6aMTi3r3+eS2W05CLT7zl3EgWyx7nYEXzWeGl7OMhW+OBDsukuMCOApcG+ge4EaQEqVEWAFn+/Dr5HwUyFFTeEj/fP/3/Xq6/3rt277iJHHSyXsWW29+e2w3OjB/eJJ20lJ4nC7fdghZw4AFSP5YVwhXPtTs2I2cX5ziP4guvpNJPCQq/DNt1uZvvsEt7jmQW8K6YixcHNTipKvhAZGZlx/soamu60WAMr8nmhLy4Svc56rLZYTYIkIvZqRzSDfqDCo9/NcOh2oaa1LBUJBD3hZ9F7lpxnfS6tpHEnowGb1wQtdFhLfJ7gGvTzGeAFRow==</code></pre><p>之前遇到过这样的一个问题，以前已经添加了know_hosts的IP，发现远程主机指纹变化了，导致无法ssh，这时需要将对应IP的这样一行删除即可。主机指纹变化有可能是系统重装，也有可能是IP被其他机器获取了。</p><p>Know_hosts文件是在没用用户下的<code>～/.ssh/know_hosts</code></p><h3 id="别名免密登录"><a href="#别名免密登录" class="headerlink" title="别名免密登录"></a>别名免密登录</h3><h4 id="免密登录的公钥认证过程"><a href="#免密登录的公钥认证过程" class="headerlink" title="免密登录的公钥认证过程"></a>免密登录的公钥认证过程</h4><ol><li>请求机Client将自己的公钥存储在远程机Server的authorized_keys中</li><li>远程机在收到请求机的请求后，会在 authorized_keys 中匹配到 Client 的公钥 pubKey，并生成随机数 R，用 Client 的公钥对该随机数进行加密得到 pubKey(R)，然后将加密后信息发送给 Client。</li><li>Client 端通过私钥进行解密得到随机数 R，然后对随机数 R 和本次会话的 SessionKey 利用 MD5 生成摘要 Digest1，发送给 Server 端。</li><li>Server 端会也会对 R 和 SessionKey 利用同样摘要算法生成 Digest2。</li><li>Server 端会最后比较 Digest1 和 Digest2 是否相同，完成认证过程。</li></ol><pre><code class="hljs mermaid">sequenceDiagram    Client --&gt;&gt;Server: add client public_key to server    Server-&gt;&gt;Client: return client public_key(R)    Client-&gt;&gt;Client: private_key decrypt R    Client-&gt;&gt;Server: send MD5(R+sessionKey)    Server-&gt;&gt;Server: MD5(R+sessionKey)    Server-&gt;&gt;Server: check Digest1 Digest2</code></pre><h4 id="ssh-免密登录应用"><a href="#ssh-免密登录应用" class="headerlink" title="ssh 免密登录应用"></a>ssh 免密登录应用</h4><ol><li><p>请求端Client生成自己的公私钥</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 如果不想设置指定信息，一路回车即可</span>ssh-keygen</code></pre><p>可以在请求端Client的当前用户目录下的.ssh文件下看到id_rsa 和id_rsa.pub文件</p></li><li><p>将自己的公钥添加到远程主机Server上</p><pre><code class="hljs shell">ssh-copy-id -i ~/.ssh/id_rsa.pub user@host</code></pre><p>在远处主机的用户目录下的.ssh 下有authorized_keys文件</p></li><li><p>在上面两步完成后已经可以进行免密登录了，但是还是需要指定用户和IP。想要添加别名登录的话，需要在请求端Client的～/.ssh下创建config文件。config文件配置如下</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 服务器1</span>Host 130    HostName 10.122.48.130    Port 22    User root    IdentityFile /home/test/.ssh/id_rsa    <span class="hljs-meta">#</span><span class="bash"> 服务器2</span>Host 131    HostName 10.122.48.131    Port 22    User root    IdentityFile /home/test/.ssh/id_rsa</code></pre><p>在请求端Client上执行 <code>ssh 130</code>相当于执行<code>ssh root@10.122.48.130</code>并且不需要密码。</p></li></ol><h3 id="AutoSSH"><a href="#AutoSSH" class="headerlink" title="AutoSSH"></a>AutoSSH</h3><p>ssh的反向穿透技术，可以实现内网服务在公网上提供服务。ssh一般用来客户端远程登录到服务器上，而ssh反向穿透“反其道而行之”，由服务端主动发起请求连接客户端，然后在客户端打开一个端口，之后发往客户端的数据包将会转发到服务端。但是ssh不支持自动重连功能，这时我们就可以用上autossh了。</p><p>我们可以利用autossh将内网端口映射到外网上。由于autossh 并不是Linux自带的，所以需要自己编译安装。</p><p>在内网机器B上进行编译安装</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">1.将autossh下载到服务器B上</span>wget http://fossies.org/Linux/privat/autossh-1.4e.tgz<span class="hljs-meta">#</span><span class="bash">2.解压</span>tar xzvf autossh-1.4e.tgz<span class="hljs-meta">#</span><span class="bash">3. 编译安装</span> cd autossh-1.4e ./configure make make install</code></pre><p>将内网机器B的公钥添加到公网机器A上</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 如果没生成过公钥执行生成公钥</span>ssh-keygen<span class="hljs-meta">#</span><span class="bash"> 将内网机器B的公钥添加到公网机器上</span>ssh-copy-id -i ~/.ssh/id_rsa.pub user@hostA</code></pre><p>在内网机器使用autossh</p><pre><code class="hljs shell">autossh -M 10000 -NR 9200:localhost:9200 -i ~/.ssh/id_rsa use@hostA</code></pre><p>参数说明：-M 参数指定监听这个反向链接的端口，如果断了会自动重连</p><p>后面的两个9200端口分别是指定公网上暴露的端口后内网暴露的端口</p><p>到了这个整个工作就完成了，这时访问公网IP的9200端口，就会访问内网中9200端口的服务。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac下效率工具</title>
    <link href="/2017/05/27/005_mac%E6%95%88%E7%8E%87/"/>
    <url>/2017/05/27/005_mac%E6%95%88%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<p>对于开发者来说，有一个符合自己开发习惯的操作环境能够最大化的提升工作效率。以下就介绍下自己个人用的比较舒服的开发环境。</p><h3 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h3><p>Mac 上是有一个自带的终端（terminal）,但是功能相对简单。而且用起来也不是特别舒服。使用Mac的基本都是用iterm2 来作为终端工具。</p><ol><li><p>设置快捷键，快速将iter2唤出。无需去手动打开应用</p><p>在Preferences-&gt;Keys-&gt; Hotkey 找到下图位置进行设置。我设置的快捷键是option+空格</p><p><img src="https://cocoon-break.github.io/images/shell/005_mac_1.png" alt="img"></p></li><li><p>设置半屏效果，并且能够固定在屏幕上方。</p><p>Preferences-&gt;Profiles-&gt;windows 设置按照下图即可</p><p><img src="https://cocoon-break.github.io/images/shell/005_mac_2.png" alt="image2"></p></li><li><p>iterm2配色</p><p>网上有很多的配色方案，我们可以用现成的。比较出名的就是iTerm2-Color-Schemes</p><pre><code class="hljs shell">git clone https://github.com/mbadolato/iTerm2-Color-Schemes</code></pre><p>好了配色方案是有了接下来我们就是进行配色了,这个也是比较简单，打开iterm2的偏好设置，找到Profiles下的Colors，选中import，这里选择刚才git 克隆下来文件中的schemes文件夹下的文件，这些文件就是各种各样的配色方案。我个人比较喜欢使用的是<code>Violet Light</code>方案哈</p><p><img src="https://cocoon-break.github.io/images/shell/005_mac_3.jpg"></p></li></ol><h4 id="常用的快捷键"><a href="#常用的快捷键" class="headerlink" title="常用的快捷键"></a>常用的快捷键</h4><ul><li>窗口和屏相关<ul><li>新建窗口：command + t</li><li>关闭窗口或者分屏：command + w</li><li>切换标签：command +  左右方向键</li><li>切换全屏：command + enter</li><li>水平分屏：command + shift + d </li><li>垂直分屏：command + d </li><li>切换分屏：command + option + 方向键</li></ul></li><li>编辑相关<ul><li>清除当前行：ctrl + u</li><li>删除光标之前的字符：ctrl + h</li><li>删除光标之前的单词：ctrl + w</li><li>删除光标到文本末尾：ctrl + k</li><li>到行首： ctrl + a</li><li>到行末：ctrl + e</li><li>查找历史命令：ctrl + r</li></ul></li></ul><h4 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h4><p>之前遇到一个情况，需要同时对多台远程机器进行同样的命令操作，这时候就可以用iterm2了。第一步先进行<code>command + d</code>  和<code>command + shift + d</code>进行分屏。在每个分屏中分别远程ssh成功之后。然后使用<code>command + shift + i</code>。这时就几个屏就会同时输入同样的内容了。</p><p><img src="https://cocoon-break.github.io/images/shell/005_mac_4.jpg"></p><h3 id="on-my-zsh"><a href="#on-my-zsh" class="headerlink" title="on-my-zsh"></a>on-my-zsh</h3><p>Shell 是LInux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后在把结果返回给用户或应用程序。</p><p>Linux/Unix 提供了很多种shell，常用的shell有这么几种，sh、bash、csh等。想知道系统有几种shell，可以通过以下命令查看。</p><pre><code class="hljs sh"><span class="hljs-comment"># 查看当前系统支持的shell</span>cat /etc/shells<span class="hljs-comment"># 查看目前使用的shell</span><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span></code></pre><p>在 Linux 里执行这个命令和 Mac 略有不同，你会发现 Mac 多了一个 zsh，也就是说 OS X 系统预装了个 zsh。mac下要开启使用zsh 执行以下命令并重启iterm2</p><pre><code class="hljs shell">chsh -s /bin/zsh</code></pre><h4 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h4><p>如果当前系统没有自带zsh，也可以手动就行安装。具体的平台可以参考<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH">官方安装教程</a>，根据安装教程完成安装后，可以对zsh进行配置。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载配置模版</span>git clone https://github.com/robbyrussell/oh-my-zsh ~/.oh-my-zsh<span class="hljs-meta">#</span><span class="bash"> 使用配置模版</span>cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</code></pre><p>oh-my-zsh 提供了很多的主题，可以选择自己喜欢的风格。具体的主题效果可以参考<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes">主题预览</a>，选好主题了，接下来就是配置了。编辑~/.zshrc 文件</p><pre><code class="hljs sh">vim ~/.zshrc<span class="hljs-comment">#编辑主题，af-magic是我机器上的主题风格，具体可以设置为刚才主题预览中的</span>ZSH_THEME=<span class="hljs-string">&quot;af-magic&quot;</span></code></pre><h4 id="zsh的优势"><a href="#zsh的优势" class="headerlink" title="zsh的优势"></a>zsh的优势</h4><ol><li>zsh 可以兼容bash，bash的使用习惯还是可以保留的</li><li>强大tab 补全功能，执行<code>cd</code>的时候，只要按两下tab，就可以将目标路径下的所有目录列出。在按回车可以进入选择的目录</li><li>智能补全功能，比如要进入/var/log/nginx/error/lastyear/may/first/monday。在zsh下输入/v/l/n/e/l/m/f/m，然后按tab就可以将目录补全。</li><li>命令选项和命令参数补全，比如输入kill -9 然后按下tab 就会显示进程名称和进程id。</li><li>大小写更正，比如当前目录下有一个AA.txt，我们输入<code>cat aa.txt</code>和tab键，就会更正为<code>cat AA.txt</code></li></ol><p>zsh 还有很多其他强大的功能，具体的等大家去探索吧，这里就不介绍更多了。</p><p>这里推荐一个替换命令<code>cd</code>的工具<code>z</code>，使用<code>z+文件夹名</code>可快速切花目录，不需要向cd那样输入相对路径和绝对路径来实现目录切换。mac下安装执行<code>brew install z</code>，然后在.zshrc 最后添加<code>source $(brew --prefix)/etc/profile.d/z.sh</code> 即可。需要留意的是使用z第一次进入跳转路径需要使用绝对路径，第二次可以直接使用文件夹名称。</p><h3 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h3><p>vim  是一个很强大的文本编辑器，vim对于每个开发来说都应该掌握的一个技能。vim本身自带了一个基础教程，学习完这个教程之后对vim基础操作都没啥问题。在iterm2或者终端输入以下命令来启动这个教程</p><pre><code class="hljs shell">vimtutor</code></pre><p>教程里面介绍了很多快捷键操作，这里就不在重复了。</p><p>Vim  还有一个很强大的功能就是插件，只要你配置好相关的插件，你就可以不使用任何的开发工具，可以直接使用vim进行开发。更多的vim参考<a href="https://cloud.tencent.com/developer/article/1343616">跟我一起学习VIM</a></p><p>相信有了上述的这些工具能够大幅提升生产效率。</p>]]></content>
    
    
    <categories>
      
      <category>开发效率</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell 笔记</title>
    <link href="/2017/05/25/004_shell%E7%AC%94%E8%AE%B0/"/>
    <url>/2017/05/25/004_shell%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h3><p>一个例子来认识<code>xargs</code>这个Linux 自带的命令。一个文件夹下有十万的.log文件和.txt文件。这时候我们要删除所有的.log文件，很多脑子想到的就是<code>rm -rf *.log</code>。这时候你会发现报一个错误<code>Argument list too long</code>。这时你又不想写一个for 循环来删，我们就可以利用xargs 这个命令来解决。xargs 一般是和管道一起使用也就是这个<code>|</code></p><pre><code class="hljs shell">ls *.log | xargs rm -rf</code></pre><p>ls 将当前目录下的log文件名标准输出，通过管道传递给xargs 过滤，然后进行删除。</p><p><strong>注：</strong> 遇到过一个问题，Linux上一些以减号开头的文件，会将这个文件认为是一个参数，如：<code>rm -rf -xxxx.log</code>是无法执行的，无论是其他的什么命令去处理类似文件名的文件，都会有这个问题。这时候只要在文件名前加两个减号即可<code>rm -rf -- -xxx.log</code></p><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>xargs  常用的几个参数也就那几个，其中一个是<code>-I</code>设置占位符。具体例子如下</p><pre><code class="hljs shell">ls *.log | xargs -I &#123;&#125; cp &#123;&#125;  /var/log/</code></pre><p> 将log文件一个一个的复制到/var/log/目录下。</p><p>xargs还有一个-P的参数，是指定xargs同时处理多少个命令，也就是设置多少个并发。可以加快处理的速度</p><pre><code class="hljs shell">ls *.log | xargs -P 8 -i cp &#123;&#125; /var/log/</code></pre><p><a href="https://www.runoob.com/linux/linux-comm-xargs.html">更多参数使用</a></p><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>awk 是一种处理文本文件的语言，是一个强大的文本分析工具。相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。awk一般是和管道一起使用。</p><p>具体例子我有一个a.csv文件，我想要第一列和第三列的数据生成一个b.csv</p><p>a.csv</p><pre><code class="hljs shell">a,b,cd,e,fh,i,j</code></pre><pre><code class="hljs shell">cat a.csv | awk -F , &#x27;&#123;print $1,$3 &#125;&#x27; &gt;&gt; b.csv</code></pre><p>b.csv</p><pre><code class="hljs shell">a,cd,fh,j</code></pre><p>我们将awk 和 xargs统一利用起来。现在我用一个测试程序起了多个进程。想要一次性将测试的这些进程一次kill掉。思路是将进程号输出，然后利用xargs 一个一个进程kill，最后的命令如下</p><pre><code class="hljs shell">ps -ef | grep test-awk | awk &#x27;&#123;print $2&#125;&#x27;| xagrs kill -9</code></pre><p>Awk 很强大，功能远不止上面的两个例子。更多的参考<a href="https://www.runoob.com/linux/linux-comm-awk.html">awk命令</a></p><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p>这个命令基本都很熟悉，这里记录几个实用的样例。</p><p>发送post json 数据</p><pre><code class="hljs shell">curl -H &quot;Content-Type: application/json&quot; -X POST -d &#x27;&#123;&quot;seq&quot;:&quot;xxxxxxxx&quot;,&quot;policy&quot;:&quot;free&quot;&#125;&#x27; &quot;http://127.0.0.1:8080/reliablePhoto&quot;</code></pre><p>将报文json 写好在一个a.json文件，然后post，这样就不用每次在终端里拼写报文了</p><pre><code class="hljs shell">curl -H &quot;Content-Type: application/json&quot; -X POST --data-binary &quot;@a.json&quot; &quot;http://127.0.0.1:8080/reliablePhoto&quot;</code></pre><p>发送post form-data数据</p><pre><code class="hljs shell">curl -F seq=xxxxxx -F img=@a.jpg http://127.0.0.1:8080/reliableImg</code></pre><p>Curl 还有更多的参数，具体可以通过<code>man curl</code> 来获取帮助</p><h3 id="jq"><a href="#jq" class="headerlink" title="jq"></a>jq</h3><p>通常后端开发使用curl 命令，请求的接口返回是json数据，默认的并没有对json 格式化，这时我们可以使用jq来格式化报文，当然也可以进行json数据解析。jq 命令并不是Linux系统自带的，所以我们需要格外安装。<a href="https://stedolan.github.io/jq/download/">下载的地址</a></p><p>jq的用法也很简单，而且官方的例子也很全。这里主要是记录下有这么一个好用的东西。<a href="https://stedolan.github.io/jq/tutorial/"> 官方教程</a></p><h3 id="shell-脚本读取命令行参数"><a href="#shell-脚本读取命令行参数" class="headerlink" title="shell 脚本读取命令行参数"></a>shell 脚本读取命令行参数</h3><p>shell 脚本中读取参数值</p><p>通常读取命令行中带过来的参数有两种方式，一直是直接根据参数位置直接获取，还有一种根据指定的key，去获取指定的值。第一种方式可以说是根本没有可读性，使用的人如果参数位置写错了，传入的值就全错了</p><h4 id="根据参数位置直接获取"><a href="#根据参数位置直接获取" class="headerlink" title="根据参数位置直接获取"></a>根据参数位置直接获取</h4><ol><li><p>先定义一个脚本test.sh，打印位置参数</p><pre><code class="hljs shell"><span class="hljs-meta">   #</span><span class="bash">!/bin/bash</span>echo $1   echo $2</code></pre></li><li><p>执行test.sh脚本</p><pre><code class="hljs shell">./test.sh haha hehehe</code></pre><p>执行的结果就是打印了两个参数，这个种方式的弊端就是，如果参数的位置传错了，那么$1 的值就不是haha了，当然可以使用这种方式写，就是可读性不太高 哈。</p></li></ol><h4 id="指定key-获取参数"><a href="#指定key-获取参数" class="headerlink" title="指定key 获取参数"></a>指定key 获取参数</h4><ol><li><p>一样的我们先定义脚本test.sh，一会儿我们在解读shell脚本中的含义</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><span class="hljs-meta">#</span><span class="bash">先定义接收各个参数值的变量</span>IP_VALUE=&quot;&quot;; NODE_VALUE=&quot;&quot;;VIP_VALUE=&quot;&quot;;while true;do if [ ! $2 ]; then break; ficase $1 in-i|--ip)case $2 in&quot;&quot;)IP_VALUE=&quot;&quot;;shift 2;;*)IP_VALUE=$2;shift 2;;esac;;-n|--node)case $2 in&quot;&quot;)NODE_VALUE=&quot;&quot;;shift 2;;*)NODE_VALUE=$2;shift 2;;esac;;-v|--vip)case $2 in&quot;&quot;)NODE_VALUE=&quot;&quot;;shift 2;;*)NODE_VALUE=$2;shift 2;;esac;; --) shift ;break ;; *) break;;esacdoneif [ -z &quot;$&#123;IP_VALUE&#125;&quot; ];    then echo &quot;error: ip is not found.&quot;;             exit 1; fiif [ -z &quot;$&#123;NODE_VALUE&#125;&quot; ];  then echo &quot;error: node is not found.&quot;;           exit 1; fiif [ -z &quot;$&#123;VIP_VALUE&#125;&quot; ];   then echo &quot;error: vip is not found.&quot;;            exit 1; fi</code></pre><ul><li>通过while 循环参数的$1 和$2 取key 和 value。</li><li>case $1取参数的key，case $2取其中的值，如果取到了，就通过shift 2，把最前面的两个位置给移除了比如:<code>./test.sh -v kkk -n bbbb</code> 读取到如果执行了 shift 2,它就会把-v kkk 给扔了</li><li>底下的if 是判断有没有读取到想要的值</li></ul></li><li><p>其他的方式去根据key获取参数</p><ul><li>一个是getopts 但是getopts不支持长选项，具体可以参考<a href="http://www.cnblogs.com/xiangzi888/archive/2012/04/03/2430736.html">getopts命令行参数处理</a></li><li>另一个是getopt，<a href="http://blog.csdn.net/wh211212/article/details/53750366">shell中使用getopts 和 getopt</a></li></ul></li></ol><p>个人建议使用第一种方式去处理shell参数，不会有太多的局限性，唯一的问题就是代码会多一些哈！</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ffmpeg</title>
    <link href="/2017/05/22/003_ffmpeg/"/>
    <url>/2017/05/22/003_ffmpeg/</url>
    
    <content type="html"><![CDATA[<h3 id="音视频的基础概念"><a href="#音视频的基础概念" class="headerlink" title="音视频的基础概念"></a>音视频的基础概念</h3><p>在开始使用ffmpeg 之前，我们需要对音视频一些基本概念有一定的了解。</p><ol><li><p>编码和格式</p><p>很多人会把这两个概念混淆在一起，因为编码和格式有不少相同的命名，但他们是两个概念。</p><ul><li><strong>编码codec :**是对图像和声音进行压缩的方法。与之对应的是</strong>解码**。常见的编码有H264，H265，MPEG等</li><li><strong>格式（容器）</strong>：是将不同编码后的信息打包在一起。常用的格式有mp4，avi，mkv等</li></ul></li><li><p>流</p><p>一般来说，视频文件很大，很难全部一次性读进内存，只能一点一点的读。操作系统对文件的操作就是基于<strong>流</strong>的抽象。</p></li><li><p>帧</p><p>我们知道传统的动画是有一张一张图画持续滚动的。基于这个原理我们能够理解帧其实就是这一张一张的图画。当然这只是一个基本的概念，实际上的ffmpeg上的帧有更多的含义。</p></li></ol><h3 id="ffmpeg是什么"><a href="#ffmpeg是什么" class="headerlink" title="ffmpeg是什么"></a>ffmpeg是什么</h3><p>ffmpeg 是一个命令行工具同时也是一个开源库，开发者可以基于现有的库进行二次开发。</p><p>Ffmpeg 安装可以自行下载使用系统安装对应的安装包<a href="https://ffmpeg.org/download.html">官网下载</a></p><h3 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h3><p><strong>关于FFmpeg的具体技术及参数细节，可以参考</strong><a href="https://ffmpeg.org/documentation.html"><strong>ffmpeg官方文档</strong></a><strong>，以下介绍一些常用的ffmpeg命令。</strong></p><ol><li><p>打开终端，查看ffmpeg帮助文档，简要了解ffmpeg的使用</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看ffmpeg 帮助信息</span>ffmpeg -help<span class="hljs-meta">#</span><span class="bash"> 查看ffmpeg 支持的格式</span>ffmpeg -formats<span class="hljs-meta">#</span><span class="bash"> 查看ffmpeg支持的编码格式</span>ffmpeg -codecs</code></pre><p> usage: ffmpeg [options][[infile options] -i infile]… {[outfile options] outfile}… 这句是说ffmpeg 的主要用法</p></li><li><p>H264编码的其他格式转换TS</p><pre><code class="hljs shell">ffmpeg -i input.(mp4、avi、264) -vcodec copy output.tsffmpeg -i input.(mp4、aiv、264) -vcodec libx264 -an out.ts</code></pre><p>说明： 一般转换格式用于离线视频识别和live555转发，多数因使用ts格式文件，故需要使用ffmpeg进行转换。</p><p>-vcodec： vcodec 参数使用copy，表示复制原编码，而不进行重编码，效率比较高，默认都是h264编码视频。</p></li><li><p>视频转帧图片</p><pre><code class="hljs shell">ffmpeg -i input.(mp4、avi、264) -r 25 -f image2 ./path/%05d.png</code></pre><p>将视频中每一帧切出来，可用作测试人脸检测模块。</p><p>-r：表示帧率，25即每秒25帧来处理帧。</p><p>-f：表示输出格式，此处为image2格式。</p><p> ./path/%05d.png：以png格式输出，path为路径，%05d为通配符，表示以5位数字命名。</p><p>批量转图：</p><pre><code class="hljs shell">find ./ -name &quot;*.mp4&quot; | cut -c 3- | xargs -i ffmpeg -i ./&#123;&#125; -r 25 -f image2 ./path/%05d&#123;&#125;.png</code></pre><p>视频帧转YUV数据</p><pre><code class="hljs shell">ffmpeg -i a.mp4 -f segment -segment_time 0.01 -r 30 -pix_fmt nv21 ./path</code></pre></li><li><p>帧图片转视频</p>   <pre><code class="hljs shell">ffmpeg -i ./path/%05d.png -r 25 -vcodec h264 output.ts</code></pre><p>   将连续的帧图片，转制为视频。</p></li><li><p>视频帧率处理</p>   <pre><code class="hljs shell">ffmpeg -i input.ts -vcode h264 -r 20 output.ts</code></pre><p>   模拟不同帧率下的视频。根据参数-r，决定处理帧率的数值。</p></li><li><p>从相机视频流录制ts或mp4格式的视频</p>   <pre><code class="hljs shell">ffmpeg -t 3600 -rtsp_transport tcp -i rtsp://10.201.105.51/live1.sdp -vcodec copy test06223600.ts</code></pre><p>   说明：tcp协议</p></li><li><p>截取视频指令</p>   <pre><code class="hljs shell">ffmpeg -ss START -vsync 0 -t DURATION -i INPUT -vcodec VIDEOCODEC-acodec AUDIOCODEC OUTPUT</code></pre><p>   说明：</p><p>   ​     -ss 视频开始时刻，格式为00:00:00，比如，从第5秒开始录制，则为00:00:05</p><p>   ​     -t 视频持续时长，格式为00:00:00，比如，要录制10秒钟的视频，则为00:00:10</p></li><li><p>合并视频指令</p>   <pre><code class="hljs shell">ffmpeg -i &quot;concat:intermediate1.ts|intermediate2.ts&quot; -c copy -bsf:a aac_adtstoasc output.ts</code></pre></li><li><p>视频旋转</p><pre><code class="hljs shell">find ./ -name &quot;*.mp4&quot; | cut -c 3- | xargs -i ffmpeg -i ./&#123;&#125; -vf &quot;transpose=1&quot; -vcodec libx264 -an ./rota/&#123;&#125;</code></pre></li><li><p>图片旋转</p>  <pre><code class="hljs shell">convert example.jpg -rotate 90 example-rotated.jpg</code></pre></li><li><p>图片等比缩小</p>   <pre><code class="hljs shell">convert k.jpg -resize 50% k2.jpg</code></pre></li><li><p>获取视频文件的帧数</p>   <pre><code class="hljs shell">ffmpeg -i 1234.mp4 -vcodec copy -acodec copy -f null /dev/null 2&gt;&amp;1 | grep &#x27;frame=&#x27;</code></pre><p><a href="https://github.com/FiveYellowMice/how-to-convert-videos-with-ffmpeg-zh">文章参考</a> </p></li></ol><h3 id="搭建rtsp视频流服务"><a href="#搭建rtsp视频流服务" class="headerlink" title="搭建rtsp视频流服务"></a>搭建rtsp视频流服务</h3><p>利用live555工具提供rtsp服务，需要从官网下载<a href="http://www.live555.com/liveMedia/public/live555-latest.tar.gz">live555源码</a>进行编译成可执行文件。</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将源码解压</span>tar xzf live555-latest.tar.gzcd live<span class="hljs-meta">#</span><span class="bash"> 生成编译Linux 64位执行程序的Makefile。编译macos ./genMakefiles macosx</span>./genMakefiles linux-64bit <span class="hljs-meta">#</span><span class="bash"> 编译</span>make</code></pre><p>编译完成后会在当前目录下生成<code>live555MediaServer</code>可执行文件。该文件可以放到任何一个Linux64位系统下使用。通过执行<code>live555MediaServer</code>可提供服务。</p><p>举个例子<br>利用ffmpeg 将一个mp4 文件转成ts格式文件</p><pre><code class="hljs shell">ffmpeg -i a.mp4 -vcodec copy a.ts</code></pre><p>将a.ts 和 <code>live555MediaServer</code>放在同一个文件夹下就可对外提供rtsp服务。具体地址<strong>rtsp://ip/a.st</strong></p>]]></content>
    
    
    <categories>
      
      <category>开源工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>supervisor</title>
    <link href="/2017/04/28/002_supervisor/"/>
    <url>/2017/04/28/002_supervisor/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Supervisor 是一个客户端/服务器系统，允许其用户监视和控制类似UNIX的操作系统上的多个进程。说的简单一点就是可以将supervisor 来启动/停止子进程。子进程退出了，supervisor 可以将子进程重新拉起。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>具体的安装方式参考<a href="http://supervisord.org/installing.html">官网</a></p><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>supervisor工具分两个</p><p>一个是supervisord，supervisord  是父进程，如果这个进程没有启动整个supervisor是无法使用的。</p><p>一个是supervisorctl ，这个是管理的命令工具，管理子进程都是用该工具进行管理。</p><h4 id="supervisord的配置文件"><a href="#supervisord的配置文件" class="headerlink" title="supervisord的配置文件"></a>supervisord的配置文件</h4><p>supervisord的配置文件一般是在 <code>/etc/supervisord.conf</code>中，如果不知道配置文件位置，可以在/etc/init.d/supervisord中start函数中查看到。</p><pre><code class="hljs shell">start()&#123;       echo -n $&quot;Starting $prog: &quot;       touch $PIDFILE       daemon $prog_bin -c /etc/supervisord.conf --pidfile $PIDFILE       sleep 1       [ -f $PIDFILE ] &amp;&amp; success $&quot;$prog startup&quot; || failure $&quot;$prog startup&quot;       echo&#125;</code></pre><p>/etc/supervisord.conf 中可以将supervisord要监听的端口关闭，使得supervisord不占用端口。</p><pre><code class="hljs shell">;[inet_http_server];port=127.0.0.1:9001</code></pre><p>/etc/supervisord.conf  也可以配置子进程的配置文件路径，这里默认的是在/etc/supervisord.conf.d/目录下</p><pre><code class="hljs shell">[include]files = /etc/supervisord.conf.d/*.conf</code></pre><h4 id="supervisor子进程的配置文件"><a href="#supervisor子进程的配置文件" class="headerlink" title="supervisor子进程的配置文件"></a>supervisor子进程的配置文件</h4><p>子进程的配置文件，位置是在/etc/supervisord.conf中设置的，具体看子进程的配置文件如下</p><pre><code class="hljs shell">[program:liveness] # 子进程的标识directory= /opt/faceid/worker#子进程的工作目录command= /opt/faceid/worker/start.sh#子进程的启动命令或脚本autostart=true#是否自启autorestart=true#是否自动重启startretries= 10000#重试次数startsecs=7#启动时间numprocs= 1 # 启动这个进程的数量，一般不写，process_name=%(program_name)s_%(process_num)s # 如果numprocs设置了多个，这里就可以区分多个名称liveness:liveness_0stopasgroup=truekillasgroup=truestdout_logfile_maxbytes=500MBstdout_logfile_backups=10stdout_logfile=/var/log/megvii/%(program_name)s_%(process_num)02d.log#日志路径</code></pre><p>当然一个配置文件，可以写很多个进程启动配置。格式和上面一样。</p><h4 id="supervisorctl-命令使用"><a href="#supervisorctl-命令使用" class="headerlink" title="supervisorctl 命令使用"></a>supervisorctl 命令使用</h4><ul><li>supervisorctl status 查看各个进程的状态</li><li>supervisorctl reload 重启supervisor 下的所有进程</li><li>supervisorctl stop name 停止指定进程</li><li>supervisorctl start name 启动指定进程</li><li>supervisorctl restart all  重启supervisor 下的所有进程</li></ul><h3 id="遇到过的问题"><a href="#遇到过的问题" class="headerlink" title="遇到过的问题"></a>遇到过的问题</h3><ol><li><p>遇到一个情况，明明已经通过supervisorctl stop all把服务全部停了，然后还是发现端口还在被占用，服务还正常提供</p><p>这个是应为supervisord 除了当前用户在用外，还有其他用户在使用。导致这个问题的出现。解决办法是明确supervisord是有多个用户在使用。将其他用户的supervisord停止即可。</p></li><li><p>给普通用户添加supervisorctl 管理权限</p><ul><li><p>修改supervisor.sock 文件的权限，该文件supervisorctl用XML_RPC和supervisord通信就是通过它进行的。如果不设置的话，supervisorctl也就不能用了</p><p>如果需要给所有用户权限则修改/etc/supervisord.conf中[unix_http_server]<br>;chmod=0700<br>去掉;， 修改为chmod=0777</p></li><li><p>给普通用户添加supervisorctl  执行权限出现supervisorctl 命令不可用</p><p>root用户下执行 <strong>chmod 707 /usr/bin/supervisorctl</strong></p><p><strong>chmod -R 707 /usr/lib/python2.7/sit-package</strong></p></li><li><p>然后使用supervisorctl status 出现pkg_resources.DistributionNotFound:supervisor==3.2.0错误</p><p>chmod -R 705 /usr/lib/python2.6/site-packages/*.egg</p></li></ul></li><li><p>找不到<code>unix:///tmp/supervisor.sock no such file</code></p><p>重启supervisord 服务，service 或者systemctl 命令都行</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>开源工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
